<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenHY的个人博客</title>
  
  
  <link href="https://born2do.github.io/atom.xml" rel="self"/>
  
  <link href="https://born2do.github.io/"/>
  <updated>2021-04-29T12:44:36.022Z</updated>
  <id>https://born2do.github.io/</id>
  
  <author>
    <name>chenhy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>localhost、127.0.0.1和本机IP之间的区别</title>
    <link href="https://born2do.github.io/2021/04/29/localhost%E3%80%81127-0-0-1%E5%92%8C%E6%9C%AC%E6%9C%BAIP%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://born2do.github.io/2021/04/29/localhost%E3%80%81127-0-0-1%E5%92%8C%E6%9C%AC%E6%9C%BAIP%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-04-29T12:44:10.000Z</published>
    <updated>2021-04-29T12:44:36.022Z</updated>
    
    <content type="html"><![CDATA[<p>1、localhost 是一个域名，在过去它指向 127.0.0.1 这个IP地址。在操作系统支持 IPv6 后，它同时还指向 IPv6 的地址 [::1] 。</p><p>2、127.0.0.1 是一个IP地址，这个地址通常分配给 loopback 接口。loopback 是一个特殊的网络接口(可理解成虚拟网卡)，用于本机中各个应用之间的网络交互。只要操作系统的网络组件是正常的，loopback 就能工作。</p><p>3、本机IP，确切地说，“本机地址”并不是一个规范的名词。通常情况下，指的是“本机物理网卡所绑定的网络协议地址”。由于目前常用网络协议只剩下了IPv4，IPX/Apple Tak消失了，IPv6还没普及，所以通常仅指IP地址甚至IPv4地址。</p><p>4、一般情况下，localhost指向127.0.0.1，无需联网，供本机访问；而本机IP需要联网，供本机或外部访问。</p>]]></content>
    
    
    <summary type="html">localhost、127.0.0.1和本机IP之间的区别</summary>
    
    
    
    <category term="IP" scheme="https://born2do.github.io/categories/IP/"/>
    
    
  </entry>
  
  <entry>
    <title>【Linux】Linux、Unix环境下的环境变量设置</title>
    <link href="https://born2do.github.io/2021/04/29/%E3%80%90Linux%E3%80%91Linux%E3%80%81Unix%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>https://born2do.github.io/2021/04/29/%E3%80%90Linux%E3%80%91Linux%E3%80%81Unix%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-04-29T12:42:38.000Z</published>
    <updated>2021-04-29T12:43:03.289Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例1. </span><br><span class="line">export JAVA_HOME=&quot;/var/java/lib&quot;</span><br><span class="line"></span><br><span class="line">例2. </span><br><span class="line">export PATH=$&#123;PATH&#125;:/var/java/lib</span><br></pre></td></tr></table></figure><p>说明：</p><p>1、如果是系统已有变量（如PATH），那么采用例2的连接方法。在原有路径后添加新路径，如果不连接原来的${PATH}，那么原有的PATH将被覆盖，后果很严重。</p><p>2、如果是新设置的变量，则按例1设置。</p><p>3、变量名和变量值之间的等号两侧不能有空格，否则报错!</p><p>4、等号右侧的变量值可以加双引号(例1)也可以不加(例2)。</p><p>5、特殊字符简介。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export a=/a/img:aa/img</span><br><span class="line">export B=.:/xiaomi/xiaoai</span><br><span class="line">export A=/ca/car:$A</span><br></pre></td></tr></table></figure><p><code>:</code>    表示并列含义，例如变量值有多个，用:符号进行分隔。</p><p><code>.</code>    表示你操作的当前目录。</p><p><code>$</code>    表示引用已定义好的变量的值。</p><p>6、set命令，显示所有本地定义的shell变量。</p><p>7、常见的环境变量</p><p>PATH:决定了shell将到哪些目录中寻找命令或程序</p><p>HOME:当前用户主目录</p><p>HISTSIZE:是指保存历史命令记录的条数</p><p>LOGNAME:是指当前用户的登录名</p>]]></content>
    
    
    <summary type="html">【Linux】Linux、Unix环境下的环境变量设置</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="环境变量" scheme="https://born2do.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Linux上的tar包拿到Windows下解压缩后新增了PaxHeaders文件夹以及其他文件</title>
    <link href="https://born2do.github.io/2021/04/28/%E3%80%90Linux%E3%80%91Linux%E4%B8%8A%E7%9A%84tar%E5%8C%85%E6%8B%BF%E5%88%B0Windows%E4%B8%8B%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%90%8E%E6%96%B0%E5%A2%9E%E4%BA%86PaxHeaders%E6%96%87%E4%BB%B6%E5%A4%B9%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%96%87%E4%BB%B6/"/>
    <id>https://born2do.github.io/2021/04/28/%E3%80%90Linux%E3%80%91Linux%E4%B8%8A%E7%9A%84tar%E5%8C%85%E6%8B%BF%E5%88%B0Windows%E4%B8%8B%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%90%8E%E6%96%B0%E5%A2%9E%E4%BA%86PaxHeaders%E6%96%87%E4%BB%B6%E5%A4%B9%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%96%87%E4%BB%B6/</id>
    <published>2021-04-28T14:23:06.000Z</published>
    <updated>2021-04-28T14:29:27.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>公司项目架构升级，服务器由AIX迁移到了Linux。由硬件差异导致了一系列问题。其中之一就是，本地生成tar包送达目标系统后，无法在目标系统前台查看全部文件，部分文件下载后显示文件损坏。</p></blockquote><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>1.我们项目近期并未改动代码，排除项目源代码问题。<br>2.目标系统近期并未对我方系统送达的文件进行加载策略的更改，排除目标系统的问题。<br>3.既然出发地与目的地均无问题，那就只能是文件的问题或是传输过程中出现问题。</p><blockquote><p>为保证万无一失，我们在新老系统切换时，进行了一个并行运行的操作，一旦出问题，切换到老系统。而这也为我们查找问题提供了依据。</p></blockquote><p>4.原AIX生成的文件大小与新Linux生成的文件大小存在差异。但是在服务器上解压缩后，文件却又是一样的，真的头大了。<br>5.将目标系统的文件拿到Windows服务器下使用7z进行解压缩后发现，莫名多出了几个文件、文件夹。而这个多出的文件夹下的文件的名称与外层的文件名称完全相同，那就有可能是文件加载的问题了。将PaxHeaders下的文件使用notepad++打开后发现是atime、mtime、ctime，相当于文件的元信息。<br>| 简名  | 全名        | 中文名   | 含义                                     |<br>| —– | ———– | ——– | —————————————- |<br>| atime | access time | 访问时间 | 文件中的数据库最后被访问的时间           |<br>| mtime | modify time | 修改时间 | 文件内容被修改的最后时间                 |<br>| ctime | change time | 变化时间 | 文件的元数据发生变化。比如权限，所有者等 |<br>6.从目标系统前台下载对应的有问题的文件，使用notepad++打开后，发现与PaxHeaders文件夹下的同名文件的内容完全一致。<br>7.至此，我找到了问题原因：1）在Linux的命令行生成tar包文件，最终的tar包包含了文件的元信息，在Windows下解压缩后相应的元信息生成了同名文件；2）目标系统的文件加载策略存在些许问题，并不是直接找到该文件，而更像是在某一文件夹下查找目标文件，而且支持子文件夹的查找，并返回找到的第一个文件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>由于是我们系统架构升级，并且没有提前预测到这种情况的发生，也没有提前告知目标系统，让他们来临时修改加载策略肯定是不可能的了，只能依靠自身来解决了。不过还好，一旦定位到问题原因，解决起来也就更加方便了。<br>Linux下使用tar命令进行打包，既然可以生成元信息文件，那么肯定有参数控制其不生成这些信息文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">man tar</span><br><span class="line">……</span><br><span class="line">-H, --format=FORMAT</span><br><span class="line">  Create archive of the given format.  Valid formats are:</span><br><span class="line"></span><br><span class="line">  gnu    GNU tar 1.13.x format</span><br><span class="line"></span><br><span class="line">  oldgnu GNU format as per tar &lt;= 1.12.</span><br><span class="line"></span><br><span class="line">  pax, posix</span><br><span class="line"> POSIX 1003.1-2001 (pax) format.</span><br><span class="line"></span><br><span class="line">  ustar  POSIX 1003.1-1988 (ustar) format.</span><br><span class="line"></span><br><span class="line">  v7     Old V7 tar format.</span><br><span class="line"></span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>原来的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf test.tar test</span><br></pre></td></tr></table></figure><p>新的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指定了打包格式</span><br><span class="line">tar --format&#x3D;gnu -cvf test.tar test</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">【Linux】Linux上的tar包拿到Windows下解压缩后新增了PaxHeaders文件夹以及其他文件</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="tar" scheme="https://born2do.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】crontab执行脚本与用户执行脚本存在差异</title>
    <link href="https://born2do.github.io/2021/04/28/%E3%80%90Linux%E3%80%91crontab%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%AD%98%E5%9C%A8%E5%B7%AE%E5%BC%82/"/>
    <id>https://born2do.github.io/2021/04/28/%E3%80%90Linux%E3%80%91crontab%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E4%B8%8E%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E5%AD%98%E5%9C%A8%E5%B7%AE%E5%BC%82/</id>
    <published>2021-04-28T14:22:16.000Z</published>
    <updated>2021-04-28T14:22:43.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>最近公司项目在进行架构升级，硬件环境也由原来的AIX迁移到了Linux，硬件环境的不同也导致了较多问题。其中之一就是，crontab调用脚本监控系统运行情况，然而用户执行脚本与crontab执行产生了一定的差异。</p></blockquote><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><ul><li>首先，脚本内容并没有太大改动，仅仅是将一些变量取值的写法更新的更为准确。</li><li>其次，脚本中的第三方命令均使用全路径引用，不存在找不到命令的问题。</li><li>然后，我又比对了crontab与手工执行脚本的运行日志。crontab运行日志的时间戳全部为数字与英文结合，而手工执行的运行日志中的时间戳则是数字与汉字相结合；crontab的运行日志显示连接数据库查询数据失败了，而手工执行的运行日志则显示一切正常。</li></ul><p>经过排查，结果显而易见，crontab执行脚本时缺少用户手工执行脚本时的一些环境变量。用户在登录服务器时，会默认加载当前用户的环境变量（用户环境变量的配置以及加载不在此做过多赘述）。而crontab就不一定了，以老的AIX环境为例，crontab是会拥有当前用户的环境变量的，这也是为什么之前都是正常运行的；而新的Linux环境，明显就是必须要显示地引入当前用户的环境变量，否则会出现一系列问题。</p><p>实际上，一开始我是不建议将当前用户的所有环境变量都引入的，毕竟权限大了，谁也控制不住。我的想法是引入部分必要的环境变量就好，其他的环境变量，要用时再说。但是作为一名开发人员，我对Linux运维这块并不是过多了解，于是就找了公司里相关的运维老师。然而，在重试多次后，那位运维老师直接将当前用户的所有环境变量都引入了，简单粗暴。然后我就在嘀咕“问题原因我早就找到了，我只是想要一个最优解，然而你却把我最初的想法告诉了我，那我岂不是舍近求远？？？”。最后在项目组成员都本着“能正常运行就行”的基本原则，还是采用了全量引入当前用户环境变量的方法。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>有两种引入方式：<br>1.在crontab中引用当前用户环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在引入环境变量的同时，也可以指定脚本的解释器</span></span><br><span class="line">20 03 * * * (. /etc/profile;/bin/sh /var/test.sh)</span><br><span class="line">20 03 * * * (. ~/.profile;/bin/sh /var/test.sh)</span><br></pre></td></tr></table></figure><p>2.在脚本中引用当前用户环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">【Linux】crontab执行脚本与用户执行脚本存在差异</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="crontab" scheme="https://born2do.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>Page指令</title>
    <link href="https://born2do.github.io/2021/04/26/Page%E6%8C%87%E4%BB%A4/"/>
    <id>https://born2do.github.io/2021/04/26/Page%E6%8C%87%E4%BB%A4/</id>
    <published>2021-04-25T16:11:09.000Z</published>
    <updated>2021-04-25T16:11:32.292Z</updated>
    
    <content type="html"><![CDATA[<p>page指令称为页面指令，用来定义JSP页面的全局属性，该配置会作用于整个页面。</p><p>page指令的属性可以定义MIME类型、定义需要导入的包、错误页的指定等。</p><p>page指令的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> 属性<span class="number">1</span>=<span class="string">&quot;属性值1&quot;</span> 属性<span class="number">2</span>=<span class="string">&quot;属性值2&quot;</span> ...... %&gt;</span><br></pre></td></tr></table></figure><h2 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h2><p>page指令是针对当前页面的指令，常用的page指令如下：</p><blockquote><p>1.&lt;%@page language=”java”%&gt; 设置jsp中用到的语言，用到的是java，也是目前唯一有效的设定。</p><p>2.&lt;%@page extends=”mypackage.myclass”%&gt; 设置目前jsp要继承的父类，一般不需要设置，在默认情况下，jsp页面默认的父类是HttpJspBase。</p><p>3.&lt;%@page import=”java.sql.*”% &gt; jsp页面所用到的类。</p><p>4.&lt;%@page errorPage=”error.jsp”%&gt; 设置该jsp页面出现异常时所要转到的页面，如果没设定，容器将使用当前的页面显示错误信息。</p><p>5.&lt;%@page isErrorPage=”true”%&gt; 设置该jsp页面是否作为错误显示页面，默认是false，如果设置为true，容器则会在当前页面生成一个exception对象，和4搭配使用。</p><p>6.&lt;%@page contentType=”text/html;charset=gb2312”%&gt; 设置页面文件格式和编码方式。</p><p>7.&lt;%@page isThreadSafe=”true”% &gt; 设置容器以多线程还是单线程运行该jsp页面，默认是true，是多线程。设置为false，则以单线程的方式运行该jsp页面。</p><p>8.&lt;%@page session=”true”% &gt; 设置该jsp页面是否可以用到session对象(jsp内置对象，为web容器创建)，默认是true，能用到session；设置为false，则用不到。</p></blockquote><h2 id="page指令属性"><a href="#page指令属性" class="headerlink" title="page指令属性"></a>page指令属性</h2><p>page指令属性说明：</p><table><thead><tr><th>属性</th><th>定义</th></tr></thead><tbody><tr><td>language=”ScriptLanguage”</td><td>指定JSP Container用什么语言来编译，目前只支持JAVA语言。默认为JAVA</td></tr><tr><td>extends=”className”</td><td>定义此JSP网页产生的Servlet是继承哪个</td></tr><tr><td>import=”importList”</td><td>定义此JSP网页要使用哪些Java API</td></tr><tr><td>session=”true|false”</td><td>决定此页面是否使用session对象。默认为true</td></tr><tr><td>buffer=”none|size in kb”</td><td>决定输出流(Input stream)是否又缓冲区。默认为8kb</td></tr><tr><td>autoFlush=”true|false”</td><td>决定输出流的缓冲区慢了后是否需要自动清除，缓冲区慢了后会产生异常错误(Exception).默认为true</td></tr><tr><td>isThreadSafe=”true|false”</td><td>是否支持线程。默认为true</td></tr><tr><td>errorPage=”url”</td><td>如果此页发生异常，网页会重新指向一个url</td></tr><tr><td>isErrorPage=”true|false”</td><td>表示此页面是否为错误处理页面。默认为false</td></tr><tr><td>contentType=”text/html;charset=gb2312”</td><td>表示MIME类型和JSP的编码方式。笔者使用例左</td></tr><tr><td>pageEncoding=”ISO-8859-1”</td><td>编码方式。（笔者已经加入使用的编码）</td></tr><tr><td>isELLgnored=”true|false”</td><td>表示是否在此JSP页面中EL表达式。true则忽略，反之false则支持。默认为false</td></tr></tbody></table><p>language：定义要使用的脚本语言，目前只能是“java”，即language=”java”。</p><p>import：和一般的Java import意义一样，用于引入要使用的类，只是用逗号“,”隔开包或者类列表。默认省略，即不引入其他类或者包。例如，import=”java.io.*,java.util.Hashtable”。</p><p>session：指定所在页面是否参与HTTP会话。默认值为true，session=”true”。</p><p>buffer：指定到客户输出流的缓冲模式。如果为none，则不缓冲；如果指定数值，那么输出就用不小于这个值的缓冲区进行缓冲。与autoFlash一起使用。默认不小于8KB，根据不同的服务器可设置。例如，buffer=”64kb”。</p><p>autoFlash：如果为true缓冲区满时，到客户端输出被刷新；如果为false缓冲区满时，出现运行异常，表示缓冲区溢出。默认为true，例如autoFlash=”true”。</p><p>info：关于JSP页面的信息，定义一个字符串，可以使用servlet.getServletInfo()获得。 默认省略。例如，info=”测试页面”。</p><p>isErrorPage：表明当前页是否为其他页的errorPage目标。如果被设置为true，则可以使用exception对象。相反，如果被设置为false，则不可以使用exception对象。默认为false，例如，isErrorPage=”true”。</p><p>errorPage：定义此页面出现异常时调用的页面。默认忽略，例如errorPage=”error.jsp”。</p><p>isThreadSafe：用来设置JSP文件是否能多线程使用。如果设置为true，那么一个JSP能够同时处理多个用户的请求；相反，如果设置为false，一个JSP只能一次处理一个请求。例如，isThreadSafe=”true”。</p><p>contentType：定义JSP字符编码和页面响应的MIME类型。TYPE=MIME TYPE;charset=CHARSET。默认为TYPE=text/html,CHARSET=iso8859-1。例如contentType=”text/html;charset=gb2312”</p><p>pageEncoding：JSP页面的字符编码 ，默认值为pageEncoding=”iso-8859-1”，例如pageEncoding=”gb2312”。</p><p>isELIgnored：指定EL（表达式语言）是否被忽略。如果为true，则容器忽略”${}”表达式的计算。默认值由web.xml描述文件的版本确定，servlet2.3以前的版本将忽略。例如isELIgnored=”true”。</p>]]></content>
    
    
    <summary type="html">Page指令</summary>
    
    
    
    <category term="JSP" scheme="https://born2do.github.io/categories/JSP/"/>
    
    
    <category term="Page" scheme="https://born2do.github.io/tags/Page/"/>
    
  </entry>
  
  <entry>
    <title>【Java】System.out.println()简析</title>
    <link href="https://born2do.github.io/2021/04/26/%E3%80%90Java%E3%80%91System-out-println-%E7%AE%80%E6%9E%90/"/>
    <id>https://born2do.github.io/2021/04/26/%E3%80%90Java%E3%80%91System-out-println-%E7%AE%80%E6%9E%90/</id>
    <published>2021-04-25T16:09:44.000Z</published>
    <updated>2021-04-25T16:10:18.249Z</updated>
    
    <content type="html"><![CDATA[<p>Java编程中，我们经常用<code>System.out.println();</code>来向控制台输出变量值或是字符串，但是这条语句，究竟是什么样的，你深究过吗？</p><p>首先，System是java.lang包中的一个类；</p><p>其次，out是System类的一个静态成员变量，而且这个成员变量是java.io.PrintStream类的引用。</p><p><img src="https://i.loli.net/2021/04/26/vnRQKjUpAGTuLDI.png" alt="System.out.println__简析.png"></p><p>最后，println()是java.io.PrintStream类里的一个方法，它的作用是向控制台输出信息。</p><p>总结：被关键字static修饰的成员变量可以直接通过”类名.成员名”来引用，而无需创建类的实例。所以System.out是调用了System类的静态成员变量out。又因为System.out是java.io.PrintStream类的实例的引用，所以可以通过 System.out.println(); 来调用此方法。</p>]]></content>
    
    
    <summary type="html">【Java】System.out.println()简析</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="println" scheme="https://born2do.github.io/tags/println/"/>
    
  </entry>
  
  <entry>
    <title>vue无法加载文件vue.ps1，因为在此系统上禁止运行脚本</title>
    <link href="https://born2do.github.io/2021/04/25/vue%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6vue-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>https://born2do.github.io/2021/04/25/vue%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6vue-ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</id>
    <published>2021-04-25T00:43:45.000Z</published>
    <updated>2021-04-25T00:44:18.104Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vue : 无法加载文件 C:\Users\born2do\AppData\Roaming\npm\vue.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?Link </span><br><span class="line">ID&#x3D;135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ vue create hotel-manager</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>使用VS Code命令终端新建VUE项目，报错如题。</p><ul><li>出错原因<br>被系统禁止运行脚本。</li><li>解决</li></ul><ol><li>右键桌面左下角的小窗口，点击“Windows PowerShell(管理员)(A)”。</li><li>执行：set-ExecutionPolicy RemoteSigned （签名或运行这些脚本），在对话框中输入“y”，确认更改策略。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; set-ExecutionPolicy RemoteSigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170</span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line">[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">vue无法加载文件vue.ps1，因为在此系统上禁止运行脚本</summary>
    
    
    
    <category term="VUE" scheme="https://born2do.github.io/categories/VUE/"/>
    
    
    <category term="VUE" scheme="https://born2do.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>无法将vue项识别为 cmdlet、函数、脚本文件或可运行程序的名称</title>
    <link href="https://born2do.github.io/2021/04/25/%E6%97%A0%E6%B3%95%E5%B0%86vue%E9%A1%B9%E8%AF%86%E5%88%AB%E4%B8%BA-cmdlet%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E6%88%96%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%8D%E7%A7%B0/"/>
    <id>https://born2do.github.io/2021/04/25/%E6%97%A0%E6%B3%95%E5%B0%86vue%E9%A1%B9%E8%AF%86%E5%88%AB%E4%B8%BA-cmdlet%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E6%88%96%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%8D%E7%A7%B0/</id>
    <published>2021-04-25T00:40:58.000Z</published>
    <updated>2021-04-25T00:41:31.330Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue : 无法将“vue”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ vue create hotel-manager</span><br><span class="line">+ ~~~</span><br><span class="line">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure><p>使用VS Code命令终端新建VUE项目，报错如题。</p><ul><li>出错原因<br>第一次学习VUE，未安装VUE程序。</li><li>解决：</li></ul><ol><li>安装node.js 。<br>从官网下载对应版本的安装包，无脑安装即可。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看node版本号</span><br><span class="line">C:\Program Files&gt;node -v</span><br><span class="line">v12.19.0</span><br><span class="line">&#x2F;&#x2F; 查看npm版本号</span><br><span class="line">C:\Program Files&gt;npm -v</span><br><span class="line">6.14.8</span><br></pre></td></tr></table></figure></li><li>安装vue 。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Vue CLI 2.x 安装</span><br><span class="line">npm install vue-cli -g</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Vue CLI 3 安装</span><br><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 若想将2.x升级至3</span><br><span class="line">npm uninstall -g vue-cli</span><br><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看vue版本号</span><br><span class="line">C:\Program Files&gt;vue -V</span><br><span class="line">@vue&#x2F;cli 4.5.12</span><br></pre></td></tr></table></figure></li><li>配置环境变量<br>将node以及vue命令所在位置配置到环境变量Path中。<br>全局搜索下npm.cmd和vue.cmd文件，将其路径添加至Path中即可。</li></ol>]]></content>
    
    
    <summary type="html">无法将vue项识别为 cmdlet、函数、脚本文件或可运行程序的名称</summary>
    
    
    
    <category term="VUE" scheme="https://born2do.github.io/categories/VUE/"/>
    
    
    <category term="VUE" scheme="https://born2do.github.io/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】MySQL安装教程</title>
    <link href="https://born2do.github.io/2021/04/24/%E3%80%90MySQL%E3%80%91MySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://born2do.github.io/2021/04/24/%E3%80%90MySQL%E3%80%91MySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-24T04:57:35.000Z</published>
    <updated>2021-04-24T04:58:07.129Z</updated>
    
    <content type="html"><![CDATA[<p>对于MySQL的安装，个人建议使用zip压缩包解压缩安装，在线安装很有问题（你连接不了外网，很多东西无法下载）。</p><p>在此只进行压缩包安装方式的讲解。</p><ol><li><p> 下载压缩包并解压。从官网（<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a>）下载你自己想要的版本，下载后自行解压。</p></li><li><p>配置环境变量。</p><ul><li><p>  新建MYSQL_HOME变量，变量名为你的解压路径名。</p></li><li><p>  编辑path变量，在末尾加上<code>;%MYSQL_HOME%\bin;</code>。</p></li></ul></li><li><p>创建配置文件my.ini。</p><p> 在MySQL文件夹下创建my.ini文件，并编辑。内容如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port &#x3D; 3306</span><br><span class="line"># 设置为自己MYSQL的安装目录</span><br><span class="line">basedir&#x3D;D:\tools\mysql-5.7.24-winx64</span><br><span class="line"># 设置MYSQL的数据目录，不要自己创建，后续操作会根据my.ini自动生成</span><br><span class="line">datadir&#x3D;D:\tools\mysql-5.7.24-winx64&#x2F;data</span><br><span class="line">max_connections&#x3D;200</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装MySQL服务以及初始化。</p><ul><li><p>  以管理员身份运行cmd.exe（位置为C:\Windows\System32\cmd.exe），cd到你的MySQL安装目录的bin目录下（<strong>以下所有命令都需要进入到mysql安装目录的bin目录下进行！！！</strong>）。</p></li><li><p>执行安装mysql服务的命令：<code>mysqld --install</code></p><p>  成功安装后，会有“Service successfully installed”提示。</p></li><li><p>初始化MySQL：<code>mysqld --initialize</code></p><p>  在该步骤会初始化生成data文件夹，所以在前面我提示了不要自己创建文件夹。</p></li><li><p>  启动MySQL：<code>net start mysql</code></p></li><li><p>MySQL登录：<code>mysql -u root -p</code></p><p>  在该步骤会提示你创建密码，输入你自己设定的密码即可，下次登陆时即可使用。</p></li></ul></li></ol><p><strong>MySQL安装完成。</strong></p>]]></content>
    
    
    <summary type="html">【MySQL】MySQL安装教程</summary>
    
    
    
    <category term="MySQL" scheme="https://born2do.github.io/categories/MySQL/"/>
    
    
    <category term="软件安装" scheme="https://born2do.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java中private、default、protected、public的访问权限范围</title>
    <link href="https://born2do.github.io/2021/04/24/%E3%80%90Java%E3%80%91Java%E4%B8%ADprivate%E3%80%81default%E3%80%81protected%E3%80%81public%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%8C%83%E5%9B%B4/"/>
    <id>https://born2do.github.io/2021/04/24/%E3%80%90Java%E3%80%91Java%E4%B8%ADprivate%E3%80%81default%E3%80%81protected%E3%80%81public%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E8%8C%83%E5%9B%B4/</id>
    <published>2021-04-24T04:56:35.000Z</published>
    <updated>2021-04-24T04:57:18.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java中private、default、protected、public的访问权限范围"><a href="#Java中private、default、protected、public的访问权限范围" class="headerlink" title="Java中private、default、protected、public的访问权限范围"></a>Java中private、default、protected、public的访问权限范围</h3><p>访问权限：private&lt;default&lt;protected&lt;public</p><p>四种修饰符的访问权限范围：</p><table><thead><tr><th align="center">权限</th><th align="center">类内</th><th align="center">同包</th><th align="center">不同包子类</th><th align="center">不同包非子类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">【Java】Java中private、default、protected、public的访问权限范围</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="访问修饰符" scheme="https://born2do.github.io/tags/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>【Java】HashTable和HashMap的区别</title>
    <link href="https://born2do.github.io/2021/04/23/%E3%80%90Java%E3%80%91HashTable%E5%92%8CHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://born2do.github.io/2021/04/23/%E3%80%90Java%E3%80%91HashTable%E5%92%8CHashMap%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-04-23T12:46:34.000Z</published>
    <updated>2021-04-23T12:47:11.257Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>关于HashMap的一些说法：<br> a)  HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。HashMap的底层结构是一个数组，数组中的每一项是一条链表。<br> b)  HashMap的实例有俩个参数影响其性能： “初始容量” 和 装填因子。<br> c)  HashMap实现不同步，线程不安全。  HashTable线程安全<br> d)  HashMap中的key-value都是存储在Entry中的。<br> e)  HashMap可以存null键和null值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode()方法和equals方法保证键的唯一性<br> f)  解决冲突主要有三种方法：定址法，拉链法，再散列法。HashMap是采用拉链法解决哈希冲突的。<br> 注： 链表法是将相同hash值的对象组成一个链表放在hash值对应的槽位；<br> 用开放定址法解决冲突的做法是：当冲突发生时，使用某种探查(亦称探测)技术在散列表中形成一个探查(测)序列。 沿此序列逐个单元地查找，直到找到给定 的关键字，或者碰到一个开放的地址(即该地址单元为空)为止（若要插入，在探查到开放的地址，则可将待插入的新结点存人该地址单元）。<br>   拉链法解决冲突的做法是： 将所有关键字为同义词的结点链接在同一个单链表中 。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数 组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取α≤1。拉链法适合未规定元素的大小。 </p></li><li><p>Hashtable和HashMap的区别：<br> a)   继承不同。<br>  public class Hashtable extends Dictionary implements Map<br> public class HashMap extends  AbstractMap implements Map<br> b)  Hashtable中的方法是同步的，而HashMap中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用Hashtable，但是要使用HashMap的话就要自己增加同步处理了。<br> c)  Hashtable 中， key 和 value 都不允许出现 null 值。 在 HashMap 中， null 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 null 。当 get() 方法返回 null 值时，即可以表示 HashMap 中没有该键，也可以表示该键所对应的值为 null 。因此，在 HashMap 中不能由 get() 方法来判断 HashMap 中是否存在某个键， 而应该用 containsKey() 方法来判断。<br> d)  两个遍历方式的内部实现上不同。Hashtable、HashMap都使用了Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。<br> e)  哈希值的使用不同，HashTable直接使用对象的hashCode。而HashMap重新计算hash值。<br> f)  Hashtable和HashMap它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable中hash数组默认大小是11，增加的方式是old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。 </p></li></ol><p>注： HashSet子类依靠hashCode()和equal()方法来区分重复元素。<br>     HashSet内部使用Map保存数据，即将HashSet的数据作为Map的key值保存，这也是HashSet中元素不能重复的原因。而Map中保存key值的,会去判断当前Map中是否含有该Key对象，内部是先通过key的hashCode,确定有相同的hashCode之后，再通过equals方法判断是否相同。 </p>]]></content>
    
    
    <summary type="html">【Java】HashTable和HashMap的区别</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="HashTable" scheme="https://born2do.github.io/tags/HashTable/"/>
    
    <category term="HashMap" scheme="https://born2do.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java报错Illegal modifier for parameter x; only final is permitted</title>
    <link href="https://born2do.github.io/2021/04/23/%E3%80%90Java%E3%80%91Java%E6%8A%A5%E9%94%99Illegal-modifier-for-parameter-x-only-final-is-permitted/"/>
    <id>https://born2do.github.io/2021/04/23/%E3%80%90Java%E3%80%91Java%E6%8A%A5%E9%94%99Illegal-modifier-for-parameter-x-only-final-is-permitted/</id>
    <published>2021-04-23T12:45:41.000Z</published>
    <updated>2021-04-23T12:46:15.100Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 报错：Illegal modifier for parameter x; only final is permitted</span></span><br><span class="line"><span class="comment">// private int x = 1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main方法中定义了整型变量x，并使用private进行了修饰，系统报错，报错提示为：Illegal modifier for parameter x; only final is permitted。</p><p>事实上，在java语法里，方法的形参以及方法体中的变量都是局部变量，不能使用访问权限修饰符public、private或protected。解决方法就是把main方法里的访问权限修饰符private删除或换成final。除此之外不能用其他的修饰符修饰，包括static也会报同样的错误。</p>]]></content>
    
    
    <summary type="html">【Java】Java报错Illegal modifier for parameter x; only final is permitted</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="报错" scheme="https://born2do.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】Echo详解</title>
    <link href="https://born2do.github.io/2021/04/22/%E3%80%90Linux%E3%80%91Echo%E8%AF%A6%E8%A7%A3/"/>
    <id>https://born2do.github.io/2021/04/22/%E3%80%90Linux%E3%80%91Echo%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-04-22T14:18:10.000Z</published>
    <updated>2021-04-22T14:18:32.512Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">       echo - display a line of text</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       echo [SHORT-OPTION]... [STRING]...</span><br><span class="line">       echo LONG-OPTION</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Echo the STRING(s) to standard output.</span><br><span class="line"></span><br><span class="line">       -n     do not output the trailing newline</span><br><span class="line"></span><br><span class="line">       -e     enable interpretation of backslash escapes</span><br><span class="line"></span><br><span class="line">       -E     disable interpretation of backslash escapes (default)</span><br><span class="line"></span><br><span class="line">       --help display this help and exit</span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              output version information and exit</span><br><span class="line"></span><br><span class="line">       If -e is in effect, the following sequences are recognized:</span><br><span class="line"></span><br><span class="line">       \\     backslash</span><br><span class="line"></span><br><span class="line">       \a     alert (BEL)</span><br><span class="line"></span><br><span class="line">       \b     backspace</span><br><span class="line"></span><br><span class="line">       \c     produce no further output</span><br><span class="line"></span><br><span class="line">       \e     escape</span><br><span class="line"></span><br><span class="line">       \f     form feed</span><br><span class="line"></span><br><span class="line">       \n     new line</span><br><span class="line"></span><br><span class="line">       \r     carriage return</span><br><span class="line"></span><br><span class="line">       \t     horizontal tab</span><br><span class="line"></span><br><span class="line">       \v     vertical tab</span><br><span class="line"></span><br><span class="line">       \0NNN  byte with octal value NNN (1 to 3 digits)</span><br><span class="line"></span><br><span class="line">       \xHH   byte with hexadecimal value HH (1 to 2 digits)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-n     不换行输出</span><br><span class="line"></span><br><span class="line">-e     激活转义字符</span><br><span class="line"></span><br><span class="line">-E     不激活转义字符(default)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">【Linux】Echo详解</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="Echo" scheme="https://born2do.github.io/tags/Echo/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】chmod命令给脚本赋权限</title>
    <link href="https://born2do.github.io/2021/04/22/%E3%80%90Linux%E3%80%91chmod%E5%91%BD%E4%BB%A4%E7%BB%99%E8%84%9A%E6%9C%AC%E8%B5%8B%E6%9D%83%E9%99%90/"/>
    <id>https://born2do.github.io/2021/04/22/%E3%80%90Linux%E3%80%91chmod%E5%91%BD%E4%BB%A4%E7%BB%99%E8%84%9A%E6%9C%AC%E8%B5%8B%E6%9D%83%E9%99%90/</id>
    <published>2021-04-22T14:17:07.000Z</published>
    <updated>2021-04-22T14:17:45.306Z</updated>
    
    <content type="html"><![CDATA[<p>Linux环境下不同的文件类型会有不同的颜色：</p><ul><li>蓝色表示目录；</li><li>绿色表示可执行文件，可执行的程序；</li><li>红色表示压缩文件或包文件；</li><li>浅蓝色表示链接文件；</li><li>灰色表示其它文件；</li><li>红色闪烁表示链接的文件有问题了；</li><li>黄色表示设备文件。</li></ul><p>在Linux环境下编写并保存脚本，该脚本将会是灰色的，是无法执行的，需要为其赋权限，可执行的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x shfile.sh</span><br></pre></td></tr></table></figure><p>即为shfile.sh赋了可执行的权限。此时文件将会显示为绿色的。</p><p>不过，大多数情况下，我都是直接 <code>chmod 777 filename </code> ，简单快捷。</p>]]></content>
    
    
    <summary type="html">【Linux】chmod命令给脚本赋权限</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="chmod" scheme="https://born2do.github.io/tags/chmod/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java关键字</title>
    <link href="https://born2do.github.io/2021/04/21/%E3%80%90Java%E3%80%91Java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://born2do.github.io/2021/04/21/%E3%80%90Java%E3%80%91Java%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2021-04-21T13:46:26.000Z</published>
    <updated>2021-04-21T13:47:23.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java关键字"><a href="#Java关键字" class="headerlink" title="Java关键字"></a>Java关键字</h2><p><img src="https://i.loli.net/2021/04/21/FK5cPRpNAUdeBZl.png" alt="Java关键字.png"></p><p>java全部关键字及含义：</p><p><img src="https://i.loli.net/2021/04/21/R1InDQJdy5kaeXc.png" alt="java全部关键字及含义.png"></p>]]></content>
    
    
    <summary type="html">【Java】Java关键字</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="关键字" scheme="https://born2do.github.io/tags/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>【Java】ArrayList和LinkedList</title>
    <link href="https://born2do.github.io/2021/04/21/%E3%80%90Java%E3%80%91ArrayList%E5%92%8CLinkedList/"/>
    <id>https://born2do.github.io/2021/04/21/%E3%80%90Java%E3%80%91ArrayList%E5%92%8CLinkedList/</id>
    <published>2021-04-21T13:45:03.000Z</published>
    <updated>2021-04-21T13:45:50.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h2><ul><li><p>  ArrayList与LinkedList都实现了List接口，继承了AbstractList类。</p></li><li><p>  ArrayList底层是动态数组是实现，随机位置添加和删除，都需要移动数组的数据，而LinkedList底层是双向链表，只需要修改Node节点的引用。</p></li><li><p>  随机访问数组要比链表快。</p></li></ul><p>ArrayList和LinkedList的区别：</p><p><img src="https://i.loli.net/2021/04/21/m2KcylOLqPUu6Hz.png" alt="ArrayList和LinkedList的区别.png"></p>]]></content>
    
    
    <summary type="html">【Java】ArrayList和LinkedList</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="ArrayList" scheme="https://born2do.github.io/tags/ArrayList/"/>
    
    <category term="LinkedList" scheme="https://born2do.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>Navicat导入数据库</title>
    <link href="https://born2do.github.io/2021/04/20/Navicat%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://born2do.github.io/2021/04/20/Navicat%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-04-20T13:37:37.000Z</published>
    <updated>2021-04-20T13:37:58.051Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>右键数据库连接（我这里命名为MySQL），点击“新建数据库”，数据库名使用你即将导入的数据库名称，字符集使用“Default character set”或“utf8 – UTF-8 Unicode”（后者更为常用，但取决于你要导入的数据库的编码方式），点击“确定”完成数据库的创建。</p><p><img src="https://i.loli.net/2021/04/20/knQDC68cwqlL4Md.png" alt="Navicat导入数据库01.png"></p><p><img src="https://i.loli.net/2021/04/20/WPIY97hzVqrLTle.png" alt="Navicat导入数据库02.png"></p></li><li><p>双击新建的数据库，再右键数据库，点击“运行SQL文件”，选择要导入的<code>.sql</code>文件，点击“开始”，待运行完，即可完成数据库的导入。</p><p> <img src="https://i.loli.net/2021/04/20/J9cBZ4nMKmf3s1L.png" alt="Navicat导入数据库03.png"></p><p><img src="https://i.loli.net/2021/04/20/pj6PginMEemXKhH.png" alt="Navicat导入数据库04.png"></p></li></ol>]]></content>
    
    
    <summary type="html">Navicat导入数据库</summary>
    
    
    
    <category term="Navicat" scheme="https://born2do.github.io/categories/Navicat/"/>
    
    
    <category term="Navicat" scheme="https://born2do.github.io/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】MySQL学习Day01</title>
    <link href="https://born2do.github.io/2021/04/20/%E3%80%90MySQL%E3%80%91MySQL%E5%AD%A6%E4%B9%A0Day01/"/>
    <id>https://born2do.github.io/2021/04/20/%E3%80%90MySQL%E3%80%91MySQL%E5%AD%A6%E4%B9%A0Day01/</id>
    <published>2021-04-20T13:36:38.000Z</published>
    <updated>2021-04-20T13:37:08.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL在DOS下的基本操作"><a href="#MySQL在DOS下的基本操作" class="headerlink" title="MySQL在DOS下的基本操作"></a>MySQL在DOS下的基本操作</h2><ol><li><p>启动MySQL服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p>关闭MySQL服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure><p>注意：上述两个命令均不是以分号结尾。</p></li><li><p>登陆MySQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后会让你输入密码，密码正确后即可进入MySQL。注意：该命令不是以分号结尾。</p><p>注意：有的登陆命令会是<code>mysql -h localhost -u root -p</code>，具体取决于你当时是怎么装MySQL的。</p></li><li><p>显示所有数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>注意：<strong>从该步骤开始，每条命令均以分号结尾。</strong></p></li><li><p>进入数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure></li><li><p>查看该数据库中所有的表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库，并且指定编码utf-8：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database testdb default character set &#39;utf8&#39;;</span><br></pre></td></tr></table></figure><p>该处的“testdb”是数据库名。</p></li><li><p>创建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>查看表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe student;</span><br></pre></td></tr></table></figure></li><li><p>查看当前数据库编码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;character_set_database&#39;;</span><br></pre></td></tr></table></figure></li><li><p>修改当前数据库编码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database testdb character set gb2312;</span><br></pre></td></tr></table></figure><p>该处的“testdb”是数据库名。</p></li><li><p>查看MySQL的各种数据的编码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%character%&quot;;</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+----------------------------------------+</span><br><span class="line">| Variable_name            | Value                                  |</span><br><span class="line">+--------------------------+----------------------------------------+</span><br><span class="line">| character_set_client     | utf8                                   |</span><br><span class="line">| character_set_connection | utf8                                   |</span><br><span class="line">| character_set_database   | utf8                                   |</span><br><span class="line">| character_set_filesystem | binary                                 |</span><br><span class="line">| character_set_results    | utf8                                   |</span><br><span class="line">| character_set_server     | utf8                                   |</span><br><span class="line">| character_set_system     | utf8                                   |</span><br><span class="line">| character_sets_dir       | D:\mysql-5.7.25-winx64\share\charsets\ |</span><br><span class="line">+--------------------------+----------------------------------------+</span><br><span class="line">8 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>注意：最好在安装MySQL的时候就将数据库编码方式改为utf-8，不然后续会很麻烦。</p></li></ol>]]></content>
    
    
    <summary type="html">【MySQL】MySQL学习Day01</summary>
    
    
    
    <category term="MySQL" scheme="https://born2do.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://born2do.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Typora修改内容字体样式</title>
    <link href="https://born2do.github.io/2021/04/19/Typora%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F/"/>
    <id>https://born2do.github.io/2021/04/19/Typora%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F/</id>
    <published>2021-04-19T11:02:53.000Z</published>
    <updated>2021-04-19T11:03:48.580Z</updated>
    
    <content type="html"><![CDATA[<p>Typora文档编辑器，近年来越来越受到广大编程人员的喜爱，使用起来极易上手，文档格式编辑也更美观。但是，默认的中文字体样式是“宋体”，就本人而言，不喜欢。但是怎么修改呢？</p><h2 id="字体样式修改教程"><a href="#字体样式修改教程" class="headerlink" title="字体样式修改教程"></a>字体样式修改教程</h2><ol><li><p>在 Typora 中依次打开 文件-&gt;偏好设置-&gt;打开主题文件夹。</p><hr></li></ol><p><img src="https://i.loli.net/2021/04/19/A6Pq84aRdTEmfJK.png" alt="Typora01.png"></p><pre><code>* * *</code></pre><p><img src="https://i.loli.net/2021/04/19/Pxny5Kfug3osaIe.png" alt="Typora02.png"></p><pre><code>* * *</code></pre><p><img src="https://i.loli.net/2021/04/19/uf1k95XZ3ztLNBe.png" alt="Typora03.png"></p><ol start="2"><li><p>这里以GitHub主题为例，修改字体样式。</p><p> 用Sublime或WebStorm打开github.css，大约在40行左右有body标签样式，在font-family添加上你自己想要的字体名称，注意所有标点要用英文字符（名称是汉字的除外）。我这里增加了”楷体”。修改后保存关闭文件，再打开Typora，内容字体样式成功修改。</p></li></ol><p><img src="https://i.loli.net/2021/04/19/e7NcDVtURHrXh2p.png" alt="Typora04.png"></p>]]></content>
    
    
    <summary type="html">Typora修改内容字体样式</summary>
    
    
    
    <category term="Typora" scheme="https://born2do.github.io/categories/Typora/"/>
    
    
    <category term="Typora" scheme="https://born2do.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm找不到文件chrome</title>
    <link href="https://born2do.github.io/2021/04/19/WebStorm%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6chrome/"/>
    <id>https://born2do.github.io/2021/04/19/WebStorm%E6%89%BE%E4%B8%8D%E5%88%B0%E6%96%87%E4%BB%B6chrome/</id>
    <published>2021-04-19T11:01:49.000Z</published>
    <updated>2021-04-19T11:02:11.294Z</updated>
    
    <content type="html"><![CDATA[<p>最近重装了系统，软件也都重新装了一遍，但是在使用WebStorm的时候突然出现了无法使用google chrome，提示”windows 找不到文件chrome，请确定文件名是否正确后，再试一次”，这个问题的本质是WebStorm中关于chrome浏览器的路径是错误的，修改浏览器路径即可。</p><ol><li> 找到你本机中chrome浏览器的位置。右击桌面上的chrome浏览器图标，找到属性–&gt;快捷方式–&gt;目标，复制路径（即chrome浏览器.exe文件的路径）。</li></ol><p><img src="https://i.loli.net/2021/04/19/j6hTXsdGimNvegC.png" alt="WebStorm找不到文件chrome01.png"></p><ol start="2"><li> 修改WebStorm中chrome浏览器的路径。打开WebStorm软件，找到file–&gt;settings–&gt;Web Browsers，在chrome那一栏最右边的path中粘贴之前复制的路径，点击OK,问题即可解决。</li></ol><p><img src="https://i.loli.net/2021/04/19/gUmS9u5ZOy3MvK1.png" alt="WebStorm找不到文件chrome02.png"></p>]]></content>
    
    
    <summary type="html">WebStorm找不到文件chrome</summary>
    
    
    
    <category term="WebStorm" scheme="https://born2do.github.io/categories/WebStorm/"/>
    
    
    <category term="WebStorm" scheme="https://born2do.github.io/tags/WebStorm/"/>
    
  </entry>
  
</feed>
