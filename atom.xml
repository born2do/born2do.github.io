<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenHY的个人博客</title>
  
  
  <link href="https://born2do.github.io/atom.xml" rel="self"/>
  
  <link href="https://born2do.github.io/"/>
  <updated>2021-10-01T15:13:31.604Z</updated>
  <id>https://born2do.github.io/</id>
  
  <author>
    <name>chenhy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【python】from Crypto.Cipher import AES报错</title>
    <link href="https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91from-Crypto-Cipher-import-AES%E6%8A%A5%E9%94%99/"/>
    <id>https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91from-Crypto-Cipher-import-AES%E6%8A%A5%E9%94%99/</id>
    <published>2021-10-01T15:10:49.000Z</published>
    <updated>2021-10-01T15:13:31.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>from Crypto.Cipher import AES报错</li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li><p>python 在 Windows下使用AES时要安装的是pycryptodome模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure></li><li><p>python 在 Linux下使用AES时要安装的是pycrypto模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">【python】from Crypto.Cipher import AES报错</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【python】pip常用命令</title>
    <link href="https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91pip%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91pip%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-10-01T14:54:47.000Z</published>
    <updated>2021-10-01T15:09:53.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>pip常用命令</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在使用python的时候，经常使用到pip这个工具，可以很方便的线上安装依赖库，当然pip还有很多参数都可以帮我们去查询一些库信息。在安装python的时候，下载带有pip的安装包就可以直接安装pip；当然如果没有带pip，也可以通过下载安装包，手动安装。</p><ol><li><p>查看是否安装pip，直接在命令行输入“pip”即可。</p><p>如显示pip所有的参数使用方法，则表明已安装。</p><p>若提示“Did not provide a command”，则有两种可能，第一是没有配置环境变量，第二就是其他应用程序也存在pip的环境变量</p></li><li><p>查看pip版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip -V</span><br></pre></td></tr></table></figure></li><li><p>查看已经安装的第三方库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="built_in">list</span></span><br></pre></td></tr></table></figure></li><li><p>安装第三方库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 库名</span><br></pre></td></tr></table></figure></li><li><p>卸载第三方库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 库名</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">【python】pip常用命令</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【Python3】configparser读取配置文件</title>
    <link href="https://born2do.github.io/2021/10/01/%E3%80%90Python3%E3%80%91configparser%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://born2do.github.io/2021/10/01/%E3%80%90Python3%E3%80%91configparser%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2021-10-01T14:43:17.000Z</published>
    <updated>2021-10-01T14:53:10.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>configparser读取配置文件</li></ul><h2 id="configparser的使用"><a href="#configparser的使用" class="headerlink" title="configparser的使用"></a>configparser的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(<span class="string">&#x27;config.ini&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">print(config[<span class="string">&#x27;settings&#x27;</span>][<span class="string">&#x27;test&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同级目录下还有个配置文件config.ini：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[settings]</span><br><span class="line">test &#x3D; 简单测试</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PycharmProjects\pythonProject\venv\Scripts\python.exe D:&#x2F;PycharmProjects&#x2F;pythonProject&#x2F;configparserTest.py</span><br><span class="line">简单测试</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><p>对于有BOM(如Windows下用记事本指定为utf-8)的文件，编码需要使用 utf-8-sig ，即把 <code>encoding=utf-8</code> 改为 <code>encoding=utf-8-sig</code>  。</p>]]></content>
    
    
    <summary type="html">【Python3】configparser读取配置文件</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【python】zip函数和zip(*)函数</title>
    <link href="https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91zip%E5%87%BD%E6%95%B0/"/>
    <id>https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91zip%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-01T14:29:34.000Z</published>
    <updated>2021-10-01T14:41:06.767Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>zip函数和zip(*)函数</li></ul><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><ul><li><p>zip()函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。</p></li><li><p>zip(*)函数利用 * 号操作符，可以将元组解压为列表。</p></li><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">zip1 = <span class="built_in">zip</span>(a, b, c)</span><br><span class="line">print(<span class="string">&#x27;zip1内容如下：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip1:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">zip2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a, b, c))</span><br><span class="line">print(<span class="string">&#x27;zip2内容如下：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip2:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\PycharmProjects\pythonProject\venv\Scripts\python.exe D:&#x2F;PycharmProjects&#x2F;pythonProject&#x2F;zipTest.py</span><br><span class="line">zip1内容如下：</span><br><span class="line">(1, 4, 7)</span><br><span class="line">(2, 5, 8)</span><br><span class="line">(3, 6, 9)</span><br><span class="line">zip2内容如下：</span><br><span class="line">(1, 2, 3)</span><br><span class="line">(4, 5, 6)</span><br><span class="line">(7, 8, 9)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">【python】zip函数和zip(*)函数</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>【python】json库的常用函数</title>
    <link href="https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91json%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://born2do.github.io/2021/10/01/%E3%80%90python%E3%80%91json%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-01T14:20:57.000Z</published>
    <updated>2021-10-01T14:26:20.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>简要介绍Python语言中json库的几个函数。</li></ul><h2 id="python对象与Json字符串的相互转换"><a href="#python对象与Json字符串的相互转换" class="headerlink" title="python对象与Json字符串的相互转换"></a>python对象与Json字符串的相互转换</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>json.dumps()</td><td>将python对象编码成Json字符串</td></tr><tr><td>json.loads()</td><td>将Json字符串解码成python对象</td></tr><tr><td>json.dump()</td><td>将python中的对象转化成json储存到文件中</td></tr><tr><td>json.load()</td><td>将文件中的json的格式转化成python对象提取出来</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">【python】json库的常用函数</summary>
    
    
    
    <category term="python" scheme="https://born2do.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>VUE项目目录结构</title>
    <link href="https://born2do.github.io/2021/09/12/VUE%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>https://born2do.github.io/2021/09/12/VUE%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</id>
    <published>2021-09-12T13:59:04.000Z</published>
    <updated>2021-09-12T13:59:57.367Z</updated>
    
    <content type="html"><![CDATA[<p>VUE项目目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">api数据访问层，所有跟数据相关的操作</span><br><span class="line">assets资源文件夹</span><br><span class="line">components组件</span><br><span class="line">config配置</span><br><span class="line">mock存放测试数据</span><br><span class="line">plugin插件</span><br><span class="line">router路由</span><br><span class="line">store状态</span><br><span class="line">util工具</span><br><span class="line">views视图</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">VUE项目目录结构</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>List集合为空或为null的区别</title>
    <link href="https://born2do.github.io/2021/09/11/List%E9%9B%86%E5%90%88%E4%B8%BA%E7%A9%BA%E6%88%96%E4%B8%BAnull%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://born2do.github.io/2021/09/11/List%E9%9B%86%E5%90%88%E4%B8%BA%E7%A9%BA%E6%88%96%E4%B8%BAnull%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-09-11T11:04:43.000Z</published>
    <updated>2021-09-11T11:13:13.192Z</updated>
    
    <content type="html"><![CDATA[<p>我们常说的“List集合为空或为null”，更具体的应该是如下说法：</p><ul><li>List集合对象的内部元素为0个</li><li>List集合对象的引用为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明</span></span><br><span class="line">        ArrayList&lt;String&gt; list;</span><br><span class="line">        System.out.println(<span class="string">&quot;声明后、初始化前，该对象的引用为null&quot;</span>);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化后，该对象的引用不为null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;初始化后、添加元素前，该对象的内部元素为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 较为常用的用法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != list &amp;&amp; !list.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 进行取值、加工等操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量声明后、初始化前，是无法将变量与null进行比较的，IDEA直接报错，无法编译。</p><p>对于List的isEmpty()方法，其实就是判断当前List集合的size是否为0，也即与下面的代码一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">List集合为空或为null的区别</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Host *.*.*.* is not allowed to connect to this MySQL server</title>
    <link href="https://born2do.github.io/2021/09/11/Host-is-not-allowed-to-connect-to-this-MySQL-server/"/>
    <id>https://born2do.github.io/2021/09/11/Host-is-not-allowed-to-connect-to-this-MySQL-server/</id>
    <published>2021-09-11T10:32:05.000Z</published>
    <updated>2021-09-11T10:43:38.242Z</updated>
    
    <content type="html"><![CDATA[<p>使用本地的Navicat连接阿里云上的MYSQL，发现报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1130 - Host &#39;*.*.*.*&#39; is not allowed to connect to this MySQL server</span><br></pre></td></tr></table></figure><p>经查看，是由于user表中root用户的host字段导致的（默认为localhost，也就是root用户只能在安装MySQL的服务器上登录）。</p><p>解决如下：</p><p>使用putty远程登录阿里云服务器，使用root用户登录MySQL，依次执行如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host &#x3D; &#39;%&#39; where user &#x3D; &#39;root&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Host *.*.*.* is not allowed to connect to this MySQL server</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Eclipse+Tomcat开发环境下web项目最终的文件位置</title>
    <link href="https://born2do.github.io/2021/09/11/Eclipse-Tomcat%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8Bweb%E9%A1%B9%E7%9B%AE%E6%9C%80%E7%BB%88%E7%9A%84%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/"/>
    <id>https://born2do.github.io/2021/09/11/Eclipse-Tomcat%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8Bweb%E9%A1%B9%E7%9B%AE%E6%9C%80%E7%BB%88%E7%9A%84%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-09-11T09:20:33.000Z</published>
    <updated>2021-09-12T09:18:22.437Z</updated>
    
    <content type="html"><![CDATA[<p>使用Eclipse新建Java web项目jwxt，项目保存至自定义工作空间 <code>D:\eclipse-workspace\jwxt</code></p><p>该路径下目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.settings</span><br><span class="line">build--该文件夹下存放生成的字节码文件</span><br><span class="line">src--该文件夹下存放src源码</span><br><span class="line">testsrc--该文件夹下存放testsrc源码</span><br><span class="line">WebContent--该文件夹下存放html、js、css等其它静态资源</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br></pre></td></tr></table></figure><p>该文件夹是项目的构成目录，并非最终项目部署时的目录。那最终的部署目录在哪里？又是什么样子的呢？</p><p>首先，我们要知道使用 Eclipse+Tomcat 部署项目时，路径是可以选择的。</p><p>在Eclipse中新建server，双击建好的server，可以Overview该server的相关配置。</p><p><img src="D:\blog\source_posts\blogImages\Eclipse-Tomcat开发环境下web项目最终的文件位置\image-20210911174432928.png" alt="image-20210911174432928"></p><p>在“Server Locations”中我们可以看看到主要有3个选项配置：</p><ul><li>Use workspace metadata</li><li>Use Tomcat installation</li><li>Use custom location</li></ul><p>默认选择第一个配置，此时最终的部署目录在</p><p><code>D:\eclipse-workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\jwxt</code></p><p>如果选择第二个选项，最终的部署目录将会在你的tomcat目录下</p><p><code>D:\Softwares\apache-tomcat-8.5.50\webapps\jwxt</code></p><p>如果选择第三个，则是自定义部署目录了，但是不建议，不方便管理项目。</p><p>项目最终部署的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">easyui--静态资源</span><br><span class="line">h-ui--静态资源</span><br><span class="line">META-INF</span><br><span class="line">WEB-INF--存放字节码文件以及其他配置文件</span><br><span class="line">index.jsp</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Eclipse+Tomcat开发环境下web项目最终的文件位置</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OceanBase开发规范和最佳实践</title>
    <link href="https://born2do.github.io/2021/08/22/OceanBase%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://born2do.github.io/2021/08/22/OceanBase%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-08-22T01:55:51.000Z</published>
    <updated>2021-08-22T01:56:27.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开发使用的注意点"><a href="#开发使用的注意点" class="headerlink" title="开发使用的注意点"></a>开发使用的注意点</h2><h3 id="1-分区表的使用建议"><a href="#1-分区表的使用建议" class="headerlink" title="1.分区表的使用建议"></a>1.分区表的使用建议</h3><ol><li>业务形态（热点数据打散、历史数据维护便利性、业务SQL的条件形态（分区裁剪））。</li><li>OB各种分区类型的设置要求。</li><li>大表变分区表。</li><li>分区键的选择，分区键必须是主键的子集。</li><li>考虑分区裁剪、partition wise join优化。</li><li>Range分区，最后一个不能是maxvalue。</li><li>分布式事务，Leader Binding、Table Group。</li><li>为了避免写入放大问题，选择表的自定义主键时，不要使用随机生成的值，要尽量有序，比如时序递增的。</li><li>分区个数：单机分区上限（5万）、单机租户允许创建的最大分区数量上限（租户内存）、单表分区数上限（8192）。</li></ol><h3 id="2-局部索引和全局索引的取舍"><a href="#2-局部索引和全局索引的取舍" class="headerlink" title="2.局部索引和全局索引的取舍"></a>2.局部索引和全局索引的取舍</h3><ol><li>如果查询条件里“包含完整的分区键”，使用本地索引是最高效的（分区裁剪）。</li><li>如果需要“不包含完整分区键”的唯一约束，1）使用全局索引；2）使用本地索引，且需要索引列上必须带上表的分区键。</li><li>其他情况，<ul><li>通常来说，全局索引能为高频且精准命中的查询（比如单记录查询）提速并减少IO；对范围查询则不一定哪种索引效果好。</li><li>不能忽视全局索引在DML语句中引入的额外开销：数据更新时带来的跨机分布式事务，事务的数据量越大则分布式事务越复杂。</li></ul></li><li>如果数据量较大，或者容易出现索引热点，可以考虑创建全局分区索引。</li></ol><h3 id="3-分布式事务流程及优化方法"><a href="#3-分布式事务流程及优化方法" class="headerlink" title="3.分布式事务流程及优化方法"></a>3.分布式事务流程及优化方法</h3><ol><li>2PC流程用户感知的commit延迟<ul><li>标准：4次日志延迟 + 2次RPC延迟</li><li>OB：1次日志延迟 + 2次RPC延迟</li></ul></li><li>优化办法：<ul><li>尽量避免跨机分布式事务。</li><li>慎重选择事务中的第一条语句，因为OBProxy的路由规则。</li><li>Primary_zone、Table Group设置。</li></ul></li></ol><h3 id="4-OB-Proxy的路由规则"><a href="#4-OB-Proxy的路由规则" class="headerlink" title="4.OB Proxy的路由规则"></a>4.OB Proxy的路由规则</h3><ol><li>proxy parser 在根据SQL选择server时，有以下几点特殊的逻辑：<ul><li>proxy parser只解析Begin/START TRANSACTION/SET 和其他DML语句，如果遇到其他单词开头的语句，proxy的parser会直接跳过，认为该语句不包含表名。</li><li>proxy parser会按照第一条包含实体表名的stmtement进行路由，如果整个stmtement都不包含表名，则将请求发送至上一条SQL所发送的server。</li></ul></li><li>OB Server会根据执行计划的类型，来告诉proxy是否将请求路由至正确的server，如果路由失败，proxy会更新location，当前的反馈机制如下：<ul><li>server返回第一条DML的命中情况</li></ul></li><li>推荐用法：</li></ol><p>3.1 以下几种情况（select可以等价替换成update/delete/replace/insert，下同），proxy能够将请求发送至正确的server，并且server能够按照proxy的命中情况进行反馈。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1; <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">1</span>; <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(); <span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>；</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1; <span class="keyword">insert</span> <span class="keyword">into</span> t2 <span class="keyword">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@ob</span>_trx_timeout <span class="operator">=</span> <span class="number">10000000</span>; <span class="keyword">begin</span>; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1; <span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>3.2 以下几种情况，proxy会将请求发送至上一个SQL所使用的server。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span> <span class="keyword">primary</span> key);<span class="keyword">create</span> <span class="keyword">table</span> t2(id <span class="type">int</span> <span class="keyword">primary</span> key);</span><br></pre></td></tr></table></figure><ol start="4"><li>不推荐用法：</li></ol><p>4.1 以下几种情况（第一个DML是非实体表），proxy能够将请求发送至正确的server，但是server反馈的信息可能不准，不建议使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;1&#x27;</span>; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">from</span> dual; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><p>4.2 以下几种情况，proxy可能能够将请求路由至正确的server，但是server反馈的信息可能不准确，不建议使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span> <span class="keyword">primary</span> key); <span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>();</span><br></pre></td></tr></table></figure><p>4.3 以下几种情况，proxy会强制将请求路由至上一次使用的server，server反馈的信息可能不准确，不建议使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> warnings; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="built_in">count</span>(\<span class="operator">*</span>) errors; <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><h3 id="5-大事务尺寸限制、长事务"><a href="#5-大事务尺寸限制、长事务" class="headerlink" title="5.大事务尺寸限制、长事务"></a>5.大事务尺寸限制、长事务</h3><p>【报错】</p><ul><li>ERROR 6244(HY000): out of transaction threshold</li></ul><p>【原因】</p><ul><li>LSMT结构，批量写出脏数据。</li><li>冻结动作时不能“转储未提交事务”，需要事务搬迁到1-freeze_trigger%</li></ul><p>【场景】</p><ul><li>业务租户内存配置较低</li><li>单体大事务</li><li>事务并发量大</li></ul><p>【建议】</p><ul><li>调整具体的表结构和调整业务的并发量</li><li>数据生命周期管理，考虑partition add/drop，而不是delete</li><li>调整业务SQL逻辑，将大段的事务拆成小段</li></ul><h3 id="6-悬挂、长事务和超时保护机制"><a href="#6-悬挂、长事务和超时保护机制" class="headerlink" title="6.悬挂、长事务和超时保护机制"></a>6.悬挂、长事务和超时保护机制</h3><p>【概念】</p><ul><li>悬挂事务</li><li>长事务</li></ul><p>【危害】</p><ul><li>持有memtablede的ref，memstore内存爆炸</li></ul><p>【建议】</p><ol><li>谨慎的timeout设置<ul><li>查询超时系统变量：ob_query_timeout（默认10s）</li><li>事务超时参数：ob_trx_timeout（默认100s）</li><li>事务空闲超时：ob_trx_idle_timeout（默认120s）</li></ul></li><li>事务及时提交</li></ol><p>【监控】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> _all_virtual_trans_stat <span class="keyword">where</span> (now() <span class="operator">-</span> ctx_create_time) <span class="operator">&gt;</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h3 id="7-Buffer表的使用建议"><a href="#7-Buffer表的使用建议" class="headerlink" title="7.Buffer表的使用建议"></a>7.Buffer表的使用建议</h3><p>【业务形态】</p><ul><li>会在短时间内 写入-修改-删除</li></ul><p>【问题】</p><ul><li>fuse流程时 data scan 时链路变长，SQL变慢</li></ul><p>【原因】</p><ul><li>LSTM的变更链路</li></ul><p>【常见的Mitigation】</p><ul><li>OB：memtable row purge</li><li>OB：针对buffer表使用特殊的转储策略：fast freeze</li><li>手工major freeze以消除多版本，减少层级</li><li>CBO统计信息不准确导致的sql plan change、outline绑定</li></ul><h3 id="8-适配大查询隔离参数"><a href="#8-适配大查询隔离参数" class="headerlink" title="8.适配大查询隔离参数"></a>8.适配大查询隔离参数</h3><p>【为什么要适配】</p><ul><li>每个租户分配一定比例的资源来处理大查询</li></ul><p>【对应参数】</p><ul><li>large_query_threshold(default 100ms)</li><li>large_query_worker_percentage(30)</li></ul><p>【适配点】</p><ul><li>这些参数需要精细化控制。</li><li>这是因为 租户级的活跃线程数是一个容量资源，线程数量是固定的。</li></ul><h3 id="9-业务幂等重试逻辑"><a href="#9-业务幂等重试逻辑" class="headerlink" title="9.业务幂等重试逻辑"></a>9.业务幂等重试逻辑</h3><p>【报错】</p><ul><li>-6225: ERROR 4012(25000):OB-4012:Transaction result is unknown</li><li>Communication link failure during commit().Transaction resolution unknown.</li></ul><p>【场景】</p><ul><li>切主时的事务搬迁</li><li>网络RPC队列堆积、网络传输慢</li><li>2PC过程中协调者宕机</li><li>事务超时参数 ob_trx_timeout （默认100s）/ob_trx_idle_timeout（默认120s）</li></ul><p>【建议】</p><ul><li>业务适配幂等重试逻辑</li><li>监控</li></ul><h3 id="10-定时合并任务、Noisy-Neighbor问题"><a href="#10-定时合并任务、Noisy-Neighbor问题" class="headerlink" title="10.定时合并任务、Noisy Neighbor问题"></a>10.定时合并任务、Noisy Neighbor问题</h3><ol><li>合并任务都做了什么？<ul><li>Compaction</li><li>数据压缩</li><li>数据校验</li><li>渐进schema变更</li><li>统计信息收集</li></ul></li><li>定时合并任务默认时间为 02:00</li><li>Noisy Neighbor问题</li></ol><h3 id="11-自增列、无主键表、Sequence"><a href="#11-自增列、无主键表、Sequence" class="headerlink" title="11.自增列、无主键表、Sequence"></a>11.自增列、无主键表、Sequence</h3><ol><li><p>自增列</p><ul><li><p>可以指定自增起始值、自增步长、自增列缓存大小</p></li><li><p>MySQL mode: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `test`(</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;自增id&#x27;</span>,</span><br><span class="line">……)</span><br></pre></td></tr></table></figure></li><li><p>连续性：跳变问题</p></li></ul></li><li><p>无主键表</p><ul><li>基于自增列方式生成的隐藏列</li><li>sync_value同步调优by autoinc_cache_refresh_interval</li><li>建议建表时为表设计主键或者唯一键</li><li>不支持后加主键</li></ul></li><li><p>Sequence</p><ul><li>默认使用 cache + noorder ，性能考虑</li><li>Cache Size：单机TPS=100时候，cache size 建议<code>100*60*60=360000</code></li></ul></li></ol>]]></content>
    
    
    <summary type="html">OceanBase开发规范和最佳实践</summary>
    
    
    
    <category term="OceanBase" scheme="https://born2do.github.io/categories/OceanBase/"/>
    
    
    <category term="OceanBase" scheme="https://born2do.github.io/tags/OceanBase/"/>
    
  </entry>
  
  <entry>
    <title>POI、swagger 导出excel时，文件名为SwaggerBootstrapUiDownload.txt</title>
    <link href="https://born2do.github.io/2021/07/25/POI%E3%80%81swagger-%E5%AF%BC%E5%87%BAexcel%E6%97%B6%EF%BC%8C%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BASwaggerBootstrapUiDownload-txt/"/>
    <id>https://born2do.github.io/2021/07/25/POI%E3%80%81swagger-%E5%AF%BC%E5%87%BAexcel%E6%97%B6%EF%BC%8C%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%BASwaggerBootstrapUiDownload-txt/</id>
    <published>2021-07-25T09:27:41.000Z</published>
    <updated>2021-07-25T09:35:04.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>POI、swagger 导出excel时，文件名为SwaggerBootstrapUiDownload.txt</p><p>修改文件后缀为xls后，文件可以正常打开，并且内容正确。</p><p>很明显时获取文件名称出错了，没有取到我们设置的名称，所以使用了默认名称“SwaggerBootstrapUiDownload.txt”。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在网上查了好长时间，都没有解决掉，但是网络上是有这种情况发生的。</p><p>我猜想作者会不会已经修复了这个问题，查看了版本号，我的pom文件中的版本果然不是最新的，更新到最新版本后，文件名称获取成功，文件正常下载。</p><p>这里附一下成功的版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--swagger第三方ui依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.xiaoymin&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;swagger-bootstrap-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.6&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>说明一下，原生POI是正常的，只是这个第三方UI的老版本有点问题。</p>]]></content>
    
    
    <summary type="html">POI、swagger 导出excel时，文件名为SwaggerBootstrapUiDownload.txt</summary>
    
    
    
    
    <category term="swagger" scheme="https://born2do.github.io/tags/swagger/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity登陆后访问其他资源提示未登录</title>
    <link href="https://born2do.github.io/2021/07/18/SpringSecurity%E7%99%BB%E9%99%86%E5%90%8E%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90%E6%8F%90%E7%A4%BA%E6%9C%AA%E7%99%BB%E5%BD%95/"/>
    <id>https://born2do.github.io/2021/07/18/SpringSecurity%E7%99%BB%E9%99%86%E5%90%8E%E8%AE%BF%E9%97%AE%E5%85%B6%E4%BB%96%E8%B5%84%E6%BA%90%E6%8F%90%E7%A4%BA%E6%9C%AA%E7%99%BB%E5%BD%95/</id>
    <published>2021-07-18T15:20:35.000Z</published>
    <updated>2021-07-18T15:32:48.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Spring Security + JWT实现登录，在前台使用Swagger登录后发现，访问其他资源报错，提示未登录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">18</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">19.216</span> DEBUG <span class="number">12260</span> --- [io-<span class="number">50000</span>-exec-<span class="number">7</span>] c.b.server.mapper.AdminMapper.selectOne  : ==&gt;  Preparing: SELECT id,name,phone,telephone,address,enabled,username,password,userFace,<span class="function">remark FROM t_admin <span class="title">WHERE</span> <span class="params">(username = ? AND enabled = ?)</span></span></span><br><span class="line"><span class="function">2021-07-18 22:50:19.217 DEBUG 12260 --- [io-50000-exec-7] c.b.server.mapper.AdminMapper.selectOne  : </span>==&gt; Parameters: &#123;id=<span class="number">1</span>, name=系统管理员, phone=<span class="number">13812361398</span>, telephone=<span class="number">71937538</span>, address=香港特别行政区强县长寿柳州路p座<span class="number">123</span>, enabled=<span class="keyword">true</span>, username=admin, password=$2a$<span class="number">10</span>$ogvUqZZAxrBwrmVI/e7.SuFYyx8my8d.9zJ6bs9lPKWvbD9eefyCe, userFace=http:<span class="comment">//192.168.10.100:8888/group1/M00/00/00/wKgKZF6oHzuAXnw9AABaLsrkrQQ148.jpg, remark=null, authorities=null, credentialsNonExpired=true, accountNonLocked=true, accountNonExpired=true&#125;(String), true(Boolean)</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">18</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">19.218</span> DEBUG <span class="number">12260</span> --- [io-<span class="number">50000</span>-exec-<span class="number">7</span>] c.b.server.mapper.AdminMapper.selectOne  : &lt;==      Total: <span class="number">0</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">18</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">19.221</span> ERROR <span class="number">12260</span> --- [io-<span class="number">50000</span>-exec-<span class="number">7</span>] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] in context with path [] threw exception</span><br><span class="line"></span><br><span class="line">java.lang.NullPointerException: <span class="keyword">null</span></span><br><span class="line">at com.born2do.server.config.security.JwtTokenUtil.validateToken(JwtTokenUtil.java:<span class="number">110</span>) ~[classes/:na]</span><br><span class="line">at com.born2do.server.config.security.JwtAuthorizationTokenFilter.doFilterInternal(JwtAuthorizationTokenFilter.java:<span class="number">47</span>) ~[classes/:na]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:<span class="number">336</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:<span class="number">103</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:<span class="number">89</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:<span class="number">336</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:<span class="number">90</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:<span class="number">75</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:<span class="number">336</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:<span class="number">110</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:<span class="number">80</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:<span class="number">336</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:<span class="number">55</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:<span class="number">336</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:<span class="number">211</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:<span class="number">183</span>) ~[spring-security-web-<span class="number">5.4</span><span class="number">.6</span>.jar:<span class="number">5.4</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:<span class="number">358</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:<span class="number">271</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">119</span>) ~[spring-web-<span class="number">5.3</span><span class="number">.6</span>.jar:<span class="number">5.3</span><span class="number">.6</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">202</span>) ~[tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">542</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">143</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">357</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">374</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">893</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1707</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) [na:<span class="number">1.8</span><span class="number">.0_191</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) [na:<span class="number">1.8</span><span class="number">.0_191</span>]</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>) [tomcat-embed-core-<span class="number">9.0</span><span class="number">.45</span>.jar:<span class="number">9.0</span><span class="number">.45</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [na:<span class="number">1.8</span><span class="number">.0_191</span>]</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>查看日志、debug发现出现了空指针异常，具体位置是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDetails userDetails = userDetailsService.loadUserByUsername(username);</span><br></pre></td></tr></table></figure><p>这里的username是通过token获取的，通过debug发现这个从token而来的username竟然是个完整的admin对象，所以才导致了从数据库查询时结果为空。</p><p>实际上我们的token只需要保存username就可以了，所以定位到了生成token的那部分代码，发现在生成token时将整个admin放了进去，这是不对的。</p><p>后修改了这部分代码，在生成token时只传入了username属性，问题解决。</p>]]></content>
    
    
    <summary type="html">SpringSecurity登陆后访问其他资源提示未登录</summary>
    
    
    
    
    <category term="SpringSecurity" scheme="https://born2do.github.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>Swagger2 UI 提示&#39;请确保swagger资源接口正确&#39;</title>
    <link href="https://born2do.github.io/2021/07/18/Swagger2-UI-%E6%8F%90%E7%A4%BA-%E8%AF%B7%E7%A1%AE%E4%BF%9Dswagger%E8%B5%84%E6%BA%90%E6%8E%A5%E5%8F%A3%E6%AD%A3%E7%A1%AE/"/>
    <id>https://born2do.github.io/2021/07/18/Swagger2-UI-%E6%8F%90%E7%A4%BA-%E8%AF%B7%E7%A1%AE%E4%BF%9Dswagger%E8%B5%84%E6%BA%90%E6%8E%A5%E5%8F%A3%E6%AD%A3%E7%A1%AE/</id>
    <published>2021-07-17T23:15:34.000Z</published>
    <updated>2021-07-18T15:18:21.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Swagger2 UI 提示“请确保swagger资源接口正确”，前台页面没有内容。</p><p><img src="https://i.loli.net/2021/07/18/5iuzfrvlIqbSgoZ.png" alt="image-20210718071827858.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>网络上的大多博客都说是“由于注解使用错误，json格式不正确导致的swagger接口文档报错”。然而我的并非如此，网络调试显示401-未登录。</p></li><li><p>状态是未登录，然而这个页面应该是无需登录就可以查看的，很明显是被拦截了。查看了放行的url，发现放行的swagger资源目录写错了，应该是<code>/swagger-resources/**</code>，而非<code>/swagger-resource/**</code>。</p></li><li><p>修改后重启应用，重新访问swagger页面，一切正常。</p><p><img src="https://i.loli.net/2021/07/18/VOkgTdNf7cXyP68.png" alt="image-20210718072954008.png"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;Swagger2 UI 提示“请确保swagger资源接口正确”，前台页面没有内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.</summary>
      
    
    
    
    
    <category term="Swagger2 UI" scheme="https://born2do.github.io/tags/Swagger2-UI/"/>
    
  </entry>
  
  <entry>
    <title>GIT学习</title>
    <link href="https://born2do.github.io/2021/07/13/GIT%E5%AD%A6%E4%B9%A0/"/>
    <id>https://born2do.github.io/2021/07/13/GIT%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-12T23:37:30.000Z</published>
    <updated>2021-07-12T23:38:11.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>下图展示了 Git 的工作流程：</p><p><img src="https://i.loli.net/2021/03/11/VkgJTNlHrK3BYtw.png" alt="git-process.png"></p><h1 id="Git-工作区、暂存区和版本库"><a href="#Git-工作区、暂存区和版本库" class="headerlink" title="Git 工作区、暂存区和版本库"></a>Git 工作区、暂存区和版本库</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>我们先来理解下 Git 工作区、暂存区和版本库概念：</p><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="https://i.loli.net/2021/03/11/hd2GlVX4cwax9Hk.jpg" alt="Git 工作区、暂存区和版本库.jpg"></p><ul><li>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage/index），标记为 “master” 的是 master 分支所代表的目录树。</li><li>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</li><li>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</li><li>当对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</li><li>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</li><li>当执行 <strong>git reset HEAD</strong> 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行 **git rm –cached ** 命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行 <strong>git checkout .</strong> 或者 **git checkout – ** 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</li><li>当执行 <strong>git checkout HEAD .</strong> 或者 **git checkout HEAD ** 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</li></ul><h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><p>Git的安装以及配置不在此做过多赘述。以下实操均在Windows10环境下操作。</p><p>1）在D盘新建文件夹“workspace”，进入该文件夹，右键鼠标，选择“Git Bash Here”，进入git命令行，可执行Linux下的一些命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init learnGit</span></span><br><span class="line">Initialized empty Git repository in D:/workspace/learnGit/.git/ </span><br></pre></td></tr></table></figure><p>我们可以看到workspace文件夹下新建了learnGit文件夹，并且在learnGit文件夹中有个**.git**文件夹，这个文件夹就是Git的本地版本库。</p><p>2）在learnGit文件夹下新建文件readme.txt：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> learnGit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lrt</span></span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi readme.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lrt</span></span><br><span class="line">total 1</span><br><span class="line">-rw-r--r-- 1 *** 197121 4  3月 11 21:31 readme.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txt</span></span><br><span class="line">one</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）查看文件状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        readme.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到readme.txt这个文件的状态是既没有添加到缓存区也没有提交到本地版本库。</p><p>4）添加文件到缓存区，并再次查看状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt                                                                     warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.txt.</span></span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status                                                                             On branch master</span></span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   readme.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，文件已经添加至缓存区，等待提交至版本库。</p><p>5）提交文件到版本库，并再次查看状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;first commit&quot;</span>                                                           [master (root-commit) 805a3d4] first commit</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status                                                                             On branch master</span></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时，本地文件与本地版本库已经完全一致。</p><p>6）使用编辑器修改本地文件readme.txt，再比较本地文件（工作区）与缓存区的差异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txt</span></span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">warning: LF will be replaced by CRLF in readme.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 5626abf..814f4a4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> one</span><br><span class="line">+two</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到工作区比暂存区文件多出一行。</p><p>7）比较工作区与本地版本库文件的差异：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff master</span></span><br><span class="line">warning: LF will be replaced by CRLF in readme.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 5626abf..814f4a4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> one</span><br><span class="line">+two</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>8）将文件添加至缓存区，比较缓存区与本地版本库的差异：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add readme.txt                                                                     warning: LF will be replaced by CRLF <span class="keyword">in</span> readme.txt.</span></span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached                                                                      diff --git a/readme.txt b/readme.txt</span></span><br><span class="line">index 5626abf..814f4a4 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> one</span><br><span class="line">+two</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>9）添加至版本库，并查看提交日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;secode&quot;</span></span></span><br><span class="line">[master 2238358] secode</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -v</span></span><br><span class="line">commit 22383582753d734a5e57c816be15d79e9ce26754 (HEAD -&gt; master)</span><br><span class="line">Author: *** &lt;***@163.com&gt;</span><br><span class="line">Date:   Thu Mar 11 22:17:59 2021 +0800</span><br><span class="line"></span><br><span class="line">    secode</span><br><span class="line"></span><br><span class="line">commit 805a3d475a05485393de8b85374b35accccae9fe</span><br><span class="line">Author: *** &lt;***@163.com&gt;</span><br><span class="line">Date:   Thu Mar 11 21:41:48 2021 +0800</span><br><span class="line"></span><br><span class="line">    first commit</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline</span></span><br><span class="line">22383582753d734a5e57c816be15d79e9ce26754 (HEAD -&gt; master) secode</span><br><span class="line">805a3d475a05485393de8b85374b35accccae9fe first commit</span><br></pre></td></tr></table></figure><p>可以看到全部共两次提交的记录。</p><p>10）回退到上一个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard head^                                                                 HEAD is now at 805a3d4 first commit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txt</span></span><br><span class="line">one</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>11）回退到任意版本（hard后面的版本号不必写全）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 22383582753d734a5e57c816be15d79e9ce26754</span></span><br><span class="line">HEAD is now at 2238358 secode</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txt</span></span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用文本的方式演示实在是太麻烦了，更多实用操作请自行检索。</p><p>也可参照B站视频，走一遍流程也就差不多了。</p><p>视频地址：<a href="https://www.bilibili.com/video/BV1oJ411d71q?p=1">https://www.bilibili.com/video/BV1oJ411d71q?p=1</a></p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></p>]]></content>
    
    
    <summary type="html">GIT学习</summary>
    
    
    
    <category term="GIT" scheme="https://born2do.github.io/categories/GIT/"/>
    
    
    <category term="GIT" scheme="https://born2do.github.io/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>本地maven仓库清理</title>
    <link href="https://born2do.github.io/2021/07/13/%E6%9C%AC%E5%9C%B0maven%E4%BB%93%E5%BA%93%E6%B8%85%E7%90%86/"/>
    <id>https://born2do.github.io/2021/07/13/%E6%9C%AC%E5%9C%B0maven%E4%BB%93%E5%BA%93%E6%B8%85%E7%90%86/</id>
    <published>2021-07-12T23:08:33.000Z</published>
    <updated>2021-07-12T23:11:19.611Z</updated>
    
    <content type="html"><![CDATA[<p>Windows环境下，清理本地maven仓库。</p><p>清理脚本如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> REPOSITORY_PATH=D:\MavenRepository</span><br><span class="line"><span class="comment">rem 正在搜索...</span></span><br><span class="line"><span class="keyword">for</span> /f &quot;delims=&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">dir</span> /b /s &quot;<span class="variable">%REPOSITORY_PATH%</span>\*lastUpdated*&quot;&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">del</span> /s /q <span class="variable">%%i</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">rem 搜索完毕</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>对路径稍作修改，运行一下即可。</p>]]></content>
    
    
    <summary type="html">本地maven仓库清理</summary>
    
    
    
    <category term="清理" scheme="https://born2do.github.io/categories/%E6%B8%85%E7%90%86/"/>
    
    
    <category term="maven" scheme="https://born2do.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>注解+AOP实现日志功能</title>
    <link href="https://born2do.github.io/2021/07/06/%E6%B3%A8%E8%A7%A3-AOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/"/>
    <id>https://born2do.github.io/2021/07/06/%E6%B3%A8%E8%A7%A3-AOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</id>
    <published>2021-07-06T14:23:52.000Z</published>
    <updated>2021-07-06T15:04:27.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现有项目有两类日志系统，一个是logback日志，一个是框架层面自己实现的对特定库表数据增删改查操作的日志。但是对于前台的用于生成文档、或是生成库表数据的按钮并没有加以控制，无法得知操作人员进行了哪些操作。项目经理要求加这么个通用模块，也的确很有必要。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>对于这个通用日志模块，首先肯定是要设计一个库表，自行设计即可。用户、模块、方法功能、参数列表、参数值、时间戳等等。</li><li>采用何种方式去实现该功能？系统现有的两个日志框架，对于这个通用日志模块的开发，并无太大用处。需要另辟蹊径。</li><li>实现该功能应该注意哪些？由于是对原有系统功能加操作日志，首先不能影响原有功能的实现，其次不能对原有代码造成过大的侵入性（这也是我拒绝在原有代码中进行将操作日志插入库表的原因），还有不能影响效率等等。</li><li>考虑到这，我的选择是AOP，因为切面的方式可以完美解决上述考虑。</li><li>但是，我们对哪些操作需要进行记录操作日志是有选择的，考虑到项目比较大，总不能指定所有的包吧？所以我选择了使用自定义注解的方式。</li><li>最终，自定义注解+AOP的实现方式被我采纳。</li></ol><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.born2do.emsys.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义日志注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenhy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">module</span><span class="params">()</span></span>;   <span class="comment">//模块名</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">function</span><span class="params">()</span></span>;   <span class="comment">//功能名</span></span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">remark</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;  <span class="comment">//自定义内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.born2do.emsys.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.born2do.emsys.annotation.LogAnnotation;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenhy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span>   <span class="comment">//表示为切面类</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//交由spring去管理</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span> <span class="comment">//默认为false。true表示使用cglib代理，false表示jdk动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAnnotationAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置切入点（此处为使用LogAnnotation注解的方法）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.born2do.emsys.annotation.LogAnnotation)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcutConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcutConfig()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知--方法前执行&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcutConfig()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知--方法后执行&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcutConfig()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知--调用获得返回值后执行&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointcutConfig()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知--抛出异常后执行&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcutConfig()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*result为连接点的放回结果*/</span></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目标类</span></span><br><span class="line">        Class targetClass = pjp.getTarget().getClass();</span><br><span class="line">        <span class="comment">// 目标类的所有方法</span></span><br><span class="line">        Method[] methods = targetClass.getMethods();</span><br><span class="line">        <span class="comment">// 切点方法</span></span><br><span class="line">        String methodName = pjp.getSignature().getName();</span><br><span class="line">        <span class="comment">// 切点方法传入的参数值</span></span><br><span class="line">        Object[] argsValue = pjp.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//找到切入点对应的方法</span></span><br><span class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</span><br><span class="line">                <span class="comment">//拿到方法上的注解对象，获取参数值</span></span><br><span class="line">                LogAnnotation logAnnotation = method.getAnnotation(LogAnnotation.class);</span><br><span class="line">                String <span class="keyword">module</span> = logAnnotation.<span class="keyword">module</span>();</span><br><span class="line">                String function = logAnnotation.function();</span><br><span class="line">                String remark = logAnnotation.remark();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取该切点方法的参数列表</span></span><br><span class="line">                Object[] param = method.getParameters();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*前置通知*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知：目标类名：&quot;</span> + targetClass.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*执行目标方法*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = pjp.proceed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*返回通知*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;返回通知：目标方法名&quot;</span> + methodName + <span class="string">&quot;，返回结果为：&quot;</span> + result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">/*异常通知*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;异常通知：目标方法名&quot;</span> + methodName + <span class="string">&quot;，异常为：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*后置通知*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知：目标方法名&quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本上所有参数都已经获取，在此处可以进行插入库表等操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.born2do.emsys.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.born2do.emsys.annotation.LogAnnotation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenhy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LogAnnotation(module = &quot;测试模块&quot;, function = &quot;用于测试SpringMVC项目框架是否搭建成功&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入 /test 路径&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通用日志功能的实现主要依靠于前两个类，当然，在目标方法上添加自定义注解也很重要。</p><p>如想运行上述代码，还请自行新建SpringBoot项目，将代码嵌入项目中。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>浏览器访问 localhost:50000/test?id=1</p><p>控制台输出如下日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前置通知：目标类名：com.born2do.emsys.controller.TestController</span><br><span class="line">前置通知--方法前执行execution(String com.born2do.emsys.controller.TestController.test(int))</span><br><span class="line">进入 &#x2F;test 路径</span><br><span class="line">返回通知--调用获得返回值后执行execution(String com.born2do.emsys.controller.TestController.test(int))</span><br><span class="line">后置通知--方法后执行execution(String com.born2do.emsys.controller.TestController.test(int))</span><br><span class="line">返回通知：目标方法名test，返回结果为：OK</span><br><span class="line">后置通知：目标方法名test</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">注解+AOP实现日志功能</summary>
    
    
    
    
    <category term="注解" scheme="https://born2do.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="AOP" scheme="https://born2do.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】MySQL自带数据库解析</title>
    <link href="https://born2do.github.io/2021/06/02/%E3%80%90MySQL%E3%80%91MySQL%E8%87%AA%E5%B8%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E6%9E%90/"/>
    <id>https://born2do.github.io/2021/06/02/%E3%80%90MySQL%E3%80%91MySQL%E8%87%AA%E5%B8%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A7%A3%E6%9E%90/</id>
    <published>2021-06-02T14:36:12.000Z</published>
    <updated>2021-06-02T14:38:59.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MySQL数据库版本<br>Welcome to the MySQL monitor.  Commands end with ; or \g.<br>Your MySQL connection id is 265<br>Server version: 5.7.25 MySQL Community Server (GPL)<br>Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.<br>Oracle is a registered trademark of Oracle Corporation and/or its<br>affiliates. Other names may be trademarks of their respective<br>owners.<br>Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.</p></blockquote><h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h2><p>information_schema保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。在information_schema中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。<br>information_schema数据库表说明:<br>SCHEMATA：提供了当前mysql实例中所有数据库的信息。<code>show databases;</code><br>TABLES：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。<code>show tables from schemaname;</code><br>COLUMNS：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。<code>show columns from schemaname.tablename;</code><br>STATISTICS：提供了关于表索引的信息。<code>show index from schemaname.tablename;</code><br>USER_PRIVILEGES（用户权限）：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。<br>SCHEMA_PRIVILEGES（方案权限）：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。<br>TABLE_PRIVILEGES（表权限）：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。<br>COLUMN_PRIVILEGES（列权限）：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。<br>CHARACTER_SETS（字符集）：提供了mysql实例可用字符集的信息。<code>show character set;</code><br>COLLATIONS：提供了关于各字符集的对照信息。<br>COLLATION_CHARACTER_SET_APPLICABILITY：指明了可用于校对的字符集。这些列等效于<code>show collation;</code>的前两个显示字段。<br>TABLE_CONSTRAINTS：描述了存在约束的表。以及表的约束类型。<br>KEY_COLUMN_USAGE：描述了具有约束的键列。<br>ROUTINES：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。<br>VIEWS：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。<br>TRIGGERS：提供了关于触发程序的信息。必须有super权限才能查看该表。</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>mysql是mysql的核心数据库，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。</p><h2 id="performance-schema"><a href="#performance-schema" class="headerlink" title="performance_schema"></a>performance_schema</h2><p>performance_schema主要用于收集数据库服务器性能参数，如提供进程等待的详细信息，包括锁、互斥变量、文件信息；保存历史的事件汇总信息，为提供MySQL服务器性能做出详细的判断；对于新增和删除监控事件点都非常容易，并可以改变MySQL服务器的监控周期等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use performance_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">| Tables_in_performance_schema                 |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">| cond_instances                               |</span><br><span class="line">| events_waits_current                         |</span><br><span class="line">| events_waits_history                         |</span><br><span class="line">| events_waits_history_long                    |</span><br><span class="line">| events_waits_summary_by_instance             |</span><br><span class="line">| events_waits_summary_by_thread_by_event_name |</span><br><span class="line">| events_waits_summary_global_by_event_name    |</span><br><span class="line">| file_instances                               |</span><br><span class="line">| file_summary_by_event_name                   |</span><br><span class="line">| file_summary_by_instance                     |</span><br><span class="line">| mutex_instances                              |</span><br><span class="line">| performance_timers                           |</span><br><span class="line">| rwlock_instances                             |</span><br><span class="line">| setup_consumers                              |</span><br><span class="line">| setup_instruments                            |</span><br><span class="line">| setup_timers                                 |</span><br><span class="line">| threads                                      |</span><br><span class="line">+----------------------------------------------+</span><br><span class="line">17 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>这里的数据表分为几类：<br>1）setup table ：  设置表，配置监控选项。<br>2）current events table : 记录当前那些thread 正在发生什么事情。<br>3）history table  发生的各种事件的历史记录表<br>4）summary table  对各种事件的统计表<br>5）其他。<br>setup 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES</span><br><span class="line">    -&gt; WHERE TABLE_SCHEMA &#x3D; &#39;performance_schema&#39;</span><br><span class="line">    -&gt; AND TABLE_NAME LIKE &#39;setup%&#39;;</span><br><span class="line">+-------------------+</span><br><span class="line">| TABLE_NAME        |</span><br><span class="line">+-------------------+</span><br><span class="line">| setup_consumers   |</span><br><span class="line">| setup_instruments |</span><br><span class="line">| setup_timers      |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure><p>setup_consumers 描述各种事件<br>setup_instruments 描述这个数据库下的表名以及是否开启监控。<br>setup_timers   描述监控选项已经采样频率的时间间隔</p><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>sys是MySQL5.7新增的系统数据库，其在MySQL5.7中是默认存在的，在MySQL5.6及以上版本可以手动导入。这个库通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据。</p>]]></content>
    
    
    <summary type="html">【MySQL】MySQL自带数据库解析</summary>
    
    
    
    <category term="MySQL" scheme="https://born2do.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://born2do.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【FTP】Windows访问vsftp服务器报错</title>
    <link href="https://born2do.github.io/2021/05/26/%E3%80%90FTP%E3%80%91Windows%E8%AE%BF%E9%97%AEvsftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%A5%E9%94%99/"/>
    <id>https://born2do.github.io/2021/05/26/%E3%80%90FTP%E3%80%91Windows%E8%AE%BF%E9%97%AEvsftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%A5%E9%94%99/</id>
    <published>2021-05-26T13:24:24.000Z</published>
    <updated>2021-05-26T13:30:50.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>Windows连接vsftp服务器放置文件，报错如下：</p><blockquote><p>打开FTP服务器上的文件夹时发生错误。请检查是否有权限访问该文件夹。<br>详细信息：<br>200 Switching to ASCII model.<br>277 Entering Passive Model(192,184,90).</p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>port方式在传输数据时，是Server端连接client端，有一个条件：它必须有一个公网ip。<br>如果client处于防火墙或net网关后面，server就找不到client端，就会报错。<br>所有的ftp客户端软件都支持两种传输方式，IE默认是port(主动)。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>IE浏览器-&gt;Internet选项-&gt;高级-&gt;将“使用被动FTP（用于防火墙和DSL调制解调器的兼容）”选项去掉勾选-&gt;确定。</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="FTP主动模式-active-mode-与被动模式-passive-mode-的工作原理"><a href="#FTP主动模式-active-mode-与被动模式-passive-mode-的工作原理" class="headerlink" title="FTP主动模式(active mode)与被动模式(passive mode)的工作原理"></a>FTP主动模式(active mode)与被动模式(passive mode)的工作原理</h2><p>主动模式（服务器向客户端敲门，然后客户端开门）FTP：<br>客户机与服务器之间建立连接时，客户机是大于1024的端口上，服务器是20端口。<br>客户机的端口是大于1024的，而服务器的端口是21端口接收请求，而是20端口给客户机回应。<br>允许FTP客户机从大于1024的端口连接服务器的21端口。<br>允许FTP服务器从21端口回应FTP客户机中大于1024端口的网络连接。<br>允许FTP服务器从20端口主动连接FTP客户机中大于1024的端口。<br>允许FTP客户机从大于1024的端口回应来自FTP服务器的20端口的网络连接。<br>命令连接：客户端大于1024的端口 -&gt; 服务器 21端口<br>数据连接：服务器 20端口 -&gt; 客户端大于1024的端口<br><img src="https://i.loli.net/2021/05/26/Zq3Ph4E6fV5CUST.jpg" alt="20171226094239038.jpg"></p><p>被动模式（客户端向服务器敲门，然后服务器开门）FTP：<br>客户机与服务器之间建立连接都是在大于1024的端口上的。<br>客户机的端口是大于1024的，而服务器的端口是21端口接收请求，而是从大于1024端口给客户机回应。<br>允许FTP客户机从大于1024的端口连接服务器的21端口。<br>允许FTP服务器从21端口回应FTP客户机中大于1024端口的网络连接。<br>允计FTP客户机从大于1024的端口连接FTP服务器的大于1024端口。<br>允许FTP服务器从大于1024的端口回应来自FTP客户机大于1024端口的网络连接。<br>命令连接：客户端大于1024的端口 -&gt; 服务器 21端口<br>数据连接：客户端大于1024的端口 -&gt; 服务器大于1024的端口<br><img src="https://i.loli.net/2021/05/26/6JYPSu9rCQBgkvn.jpg" alt="20171226094256663.jpg"></p>]]></content>
    
    
    <summary type="html">【FTP】Windows访问vsftp服务器报错</summary>
    
    
    
    <category term="FTP" scheme="https://born2do.github.io/categories/FTP/"/>
    
    
    <category term="error" scheme="https://born2do.github.io/tags/error/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】给其他用户开启crontab</title>
    <link href="https://born2do.github.io/2021/05/24/%E3%80%90Linux%E3%80%91%E7%BB%99%E5%85%B6%E4%BB%96%E7%94%A8%E6%88%B7%E5%BC%80%E5%90%AFcrontab/"/>
    <id>https://born2do.github.io/2021/05/24/%E3%80%90Linux%E3%80%91%E7%BB%99%E5%85%B6%E4%BB%96%E7%94%A8%E6%88%B7%E5%BC%80%E5%90%AFcrontab/</id>
    <published>2021-05-24T13:58:54.000Z</published>
    <updated>2021-05-24T13:59:21.728Z</updated>
    
    <content type="html"><![CDATA[<p>在服务器上新建了vlog用户，想要开启定时任务，但是系统直接提示没有crontab权限。<br>解决：<br>使用vlog用户登录，执行如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 找到crontab命令所在路径</span></span><br><span class="line">cd /usr/bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给其他用户赋权限</span></span><br><span class="line">chmod o+x crontab</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">【Linux】给其他用户开启crontab</summary>
    
    
    
    <category term="Linux" scheme="https://born2do.github.io/categories/Linux/"/>
    
    
    <category term="crontab" scheme="https://born2do.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>【Java】IO流未正确关闭导致的读写问题</title>
    <link href="https://born2do.github.io/2021/05/22/%E3%80%90Java%E3%80%91IO%E6%B5%81%E6%9C%AA%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%AD%E5%AF%BC%E8%87%B4%E7%9A%84%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/"/>
    <id>https://born2do.github.io/2021/05/22/%E3%80%90Java%E3%80%91IO%E6%B5%81%E6%9C%AA%E6%AD%A3%E7%A1%AE%E5%85%B3%E9%97%AD%E5%AF%BC%E8%87%B4%E7%9A%84%E8%AF%BB%E5%86%99%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-22T08:58:55.000Z</published>
    <updated>2021-05-22T08:59:30.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="情景再现"><a href="#情景再现" class="headerlink" title="情景再现"></a>情景再现</h1><p>同事写的一段代码，主要功能是生成本地文件并调用脚本将其连同上级文件夹进行打包，应用环境为Linux。但是，在服务器上运行后，发现打包的文件为空文件。</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>因为本地开发环境为Windows，并不能执行shell脚本，所以同事在本地开发测试时认为文件正常生成就基本没问题了，也就没顾及太多将代码提交了。<br>因为本地正常生成文件，而服务器的压缩包没有文件内容，所以我首先对本地与SVN上的代码进行了比对，排查是否是由于代码问题导致源文件根本就没有生成内容继而导致目标压缩包中的文件也没有内容。</p><ul><li>比对本地代码与SVN上的代码后，并无发现异常，排除代码提交问题。</li><li>修改了应用服务器上的shell脚本，使其在正常打包后不删除源文件。再次执行相关作业，源文件内容正常，目标压缩包中的文件为空白。排除了代码导致的源文件内容未正常生成。</li><li>代码和文件都没有发现问题，源文件也正常生成，那就可能是打包的问题了。在源文件正常存在的情形下，使用相关用户执行该脚本，发现正常打包，文件一切正常。</li><li>手工执行脚本，文件正常打包，而应用执行脚本却发生了，打包后文件内容为空白的情况。我又怀疑是权限问题，因为如果没有读写权限的话，cp或是tar也会发生目标文件为空的情况。我在脚本中给源文件夹添加了777的权限，这下总不能再失败了吧。</li><li>执行结果与前几次相同，目标压缩包中的文件仍为空白。排除权限问题。</li><li>排除到这时候，已经没有了方向。我尝试着对其他文件夹进行打包操作，发现全部都正常打包了，并未发生内容丢失的情况。说明脚本中打包命令的使用是没有问题的。</li><li>在目标文件夹放入了其他文件，和之前生成的源文件（名字改掉），再次执行作业，打包的结果显示，只有程序生成的那个文件打包后发生内容丢失的情况。排查方向又再次回来了，打包时文件的状态不对劲。</li><li>文件状态不对，又涉及到文件读写，我的第一反应是IO流的处理。但是我们是有代码扫描的，之前她就提过一版专门修复流的问题，是通过的呀？流肯定是关闭了的。</li><li>我在本地更新代码后，一眼就看到了问题。IO流的确是被关闭了，但是调用脚本进行打包的时机不对，那个时候流还未关闭。这就导致了，调用脚本在进行打包操作时，源文件的状态是正在被写入当中，服务器在执行tar命令时，读取到的文件是空白的，这也很好地解释了为什么源文件正常，而目标压缩包中文件为空白。也能解释为什么手工执行脚本，一切正常，因为那时候源文件的状态已经是写完成的状态了，不再被其他线程占用。</li><li>下面是问题代码的demo<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;d:\\a.txt&quot;</span>);</span><br><span class="line">osw = <span class="keyword">new</span> OutputStreamWriter(fos, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">bw = <span class="keyword">new</span> BufferedWriter(osw);</span><br><span class="line">bw.write(<span class="string">&quot;java IO close test&quot;</span>);</span><br><span class="line"><span class="comment">// 调用shell脚本进行打包操作</span></span><br><span class="line">doTarFile();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bw != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;bw未关闭&quot;</span>);</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (osw != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;osw未关闭&quot;</span>);</span><br><span class="line">osw.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;fos未关闭&quot;</span>);</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>脚本不做改动，代码中调用脚本的那段代码提出来，放到外层方法的写文件方法之后。</p>]]></content>
    
    
    <summary type="html">【Java】IO流未正确关闭导致的读写问题</summary>
    
    
    
    <category term="Java" scheme="https://born2do.github.io/categories/Java/"/>
    
    
    <category term="IO流" scheme="https://born2do.github.io/tags/IO%E6%B5%81/"/>
    
  </entry>
  
</feed>
