{"meta":{"title":"ChenHY的个人博客","subtitle":"","description":"","author":"chenhy","url":"https://born2do.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-03-01T12:03:38.729Z","updated":"2021-03-01T12:03:38.729Z","comments":false,"path":"/404.html","permalink":"https://born2do.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-03-01T14:02:35.954Z","updated":"2021-03-01T14:02:35.954Z","comments":false,"path":"about/index.html","permalink":"https://born2do.github.io/about/index.html","excerpt":"","text":"致力于网站建设后端开发，梦想是成为一名架构师，开发出一套高可用、有特色的开源框架，现正为之努力着。"},{"title":"书单","date":"2021-03-01T12:03:38.819Z","updated":"2021-03-01T12:03:38.819Z","comments":false,"path":"books/index.html","permalink":"https://born2do.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-03-01T12:03:38.842Z","updated":"2021-03-01T12:03:38.842Z","comments":false,"path":"categories/index.html","permalink":"https://born2do.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-03-01T12:03:38.854Z","updated":"2021-03-01T12:03:38.854Z","comments":true,"path":"links/index.html","permalink":"https://born2do.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-03-01T12:31:07.872Z","updated":"2021-03-01T12:03:38.880Z","comments":false,"path":"repository/index.html","permalink":"https://born2do.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-03-01T12:03:38.906Z","updated":"2021-03-01T12:03:38.906Z","comments":false,"path":"tags/index.html","permalink":"https://born2do.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java代码注释规约及eclipse相关配置","slug":"Java代码注释规约及eclipse相关配置","date":"2021-03-11T12:31:20.000Z","updated":"2021-03-11T12:32:06.440Z","comments":true,"path":"2021/03/11/Java代码注释规约及eclipse相关配置/","link":"","permalink":"https://born2do.github.io/2021/03/11/Java%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6%E5%8F%8Aeclipse%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/","excerpt":"","text":"Java代码注释规约1.【强制】类、类属性、类方法的注释必须使用Javadoc规范，使用 /** 内容 */ 格式，不得使用 // xxx 方式。说明：在IDE编辑窗口中，Javadoc方式会提示相关注释，生成Javadoc可以正确输出相应注释；在IDE中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。2.【强制】所有的抽象方法（包括接口中的方法）必须要用Javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能。说明：对子类的实现要求，或者调用注意事项，请一并说明。3.【强制】所有的类都必须添加创建者和创建日期。4.【强制】方法内部单行注释，在被注释语句上方另起一行，使用 // 注释。方法内部多行注释使用 /* */ 注释，注意与代码对齐。5.【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。6.【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。反例：“TCP连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。7.【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。8.【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码）。9.【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。10.【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。反例： 12// put elephant into fridgeput(elephant, fridge); 方法名put，加上两个有意义的变量名elephant和fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。11.【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。1）待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个Javadoc的标签，目前的Javadoc还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个Javadoc标签）。2）错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）在注释中用FIXME标记某代码是错误的，而且不能工作，需要及时纠正的情况。 eclipse相关配置Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates-&gt;Comments-&gt; 类、接口Types-&gt;edit填入以下内容： 12345&#x2F;** * $&#123;tags&#125; * @author $&#123;user&#125; * @date $&#123;date&#125; *&#x2F; 方法体Methods-&gt;edit填入以下内容（一般会有默认格式，无需修改）： 123&#x2F;** * $&#123;tags&#125; *&#x2F; 修改保存修改后勾选下方的“Automatically add commects for new methods,types……”，然后点击“Apply and Close”即可。说明：1）以上修改的部分为强制内容，必须填写！！！也可自行额外添加其他标签内容。2）接口或抽象类的JavaDoc必须填写，实现类中对接口或是抽象类的重写方法的JavaDoc可以不写，只要有@Override注解即可。","categories":[{"name":"规约","slug":"规约","permalink":"https://born2do.github.io/categories/%E8%A7%84%E7%BA%A6/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://born2do.github.io/tags/Java/"}],"author":"chenhy"},{"title":"【Linux】crontab定时任务","slug":"【Linux】crontab定时任务","date":"2021-03-10T12:43:35.000Z","updated":"2021-03-10T12:44:12.919Z","comments":true,"path":"2021/03/10/【Linux】crontab定时任务/","link":"","permalink":"https://born2do.github.io/2021/03/10/%E3%80%90Linux%E3%80%91crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"Linux crontab是用来定期执行程序的命令。 查看定时任务1crontab -l 编辑定时任务1crontab -e 删除定时任务1crontab -d 说明：以上几个命令均没有添加用户角色信息，默认为编辑当前用户的crontab定时任务。 crontab内容格式： 1f1 f2 f3 f4 f5 program 其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。 当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其余类推 当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其余类推 当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其余类推 当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其余类推12345678* * * * *- - - - -| | | | || | | | +----- 星期中星期几 (0 - 6) (星期天 为0)| | | +---------- 月份 (1 - 12) | | +--------------- 一个月中的第几天 (1 - 31)| +-------------------- 小时 (0 - 23)+------------------------- 分钟 (0 - 59) eg： 每一分钟执行一次 /bin/ls1* * * * * &#x2F;bin&#x2F;ls 在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup10 6-12&#x2F;3 * 12 * &#x2F;usr&#x2F;bin&#x2F;backup 每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”120 0-23&#x2F;2 * * * echo &quot;haha&quot;","categories":[{"name":"Linux","slug":"Linux","permalink":"https://born2do.github.io/categories/Linux/"}],"tags":[{"name":"crontab","slug":"crontab","permalink":"https://born2do.github.io/tags/crontab/"}],"author":"chenhy"},{"title":"【Excel】使用小tips","slug":"【Excel】使用小tips","date":"2021-03-10T12:42:32.000Z","updated":"2021-03-10T12:43:16.331Z","comments":true,"path":"2021/03/10/【Excel】使用小tips/","link":"","permalink":"https://born2do.github.io/2021/03/10/%E3%80%90Excel%E3%80%91%E4%BD%BF%E7%94%A8%E5%B0%8Ftips/","excerpt":"","text":"快速填充 在第一个单元格写好公式 选中第一个单元格到本列的最后一行 将光标移动到公式栏，然后按下组合键ctrl+enter 全部填充完毕 列查找VLOOKUP函数VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])VLOOKUP(查找值，查找范围，查找列数，精确匹配或者近似匹配）","categories":[{"name":"Excel","slug":"Excel","permalink":"https://born2do.github.io/categories/Excel/"}],"tags":[{"name":"Excel","slug":"Excel","permalink":"https://born2do.github.io/tags/Excel/"}],"author":"chenhy"},{"title":"【Linux】使用find命令清理指定时间之前的文件","slug":"【Linux】使用find命令清理指定时间之前的文件","date":"2021-03-09T12:39:45.000Z","updated":"2021-03-09T12:40:26.057Z","comments":true,"path":"2021/03/09/【Linux】使用find命令清理指定时间之前的文件/","link":"","permalink":"https://born2do.github.io/2021/03/09/%E3%80%90Linux%E3%80%91%E4%BD%BF%E7%94%A8find%E5%91%BD%E4%BB%A4%E6%B8%85%E7%90%86%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E4%B9%8B%E5%89%8D%E7%9A%84%E6%96%87%E4%BB%B6/","excerpt":"","text":"1find /root/logs -type f -name &quot;*&quot; -mtime +7 -exec rm -f &#123;&#125; \\; 说明：find 后面紧跟的/root/logs是要查找的目录，. 表示当前目录-type f：指定查找对象为文件-name &quot;*&quot;：指定查找对象名称为任意-mtime +7：查找7天以前的老文件-exec rm -f &#123;&#125; \\;：执行删除命令，后面有个 &#123;&#125; \\; 是必须的 扩展如果想要定期执行该命令，可以将该命令放到脚本中，然后再使用crontab定时任务进行执行操作。","categories":[{"name":"shell","slug":"shell","permalink":"https://born2do.github.io/categories/shell/"}],"tags":[{"name":"find","slug":"find","permalink":"https://born2do.github.io/tags/find/"}],"author":"chenhy"},{"title":"开源/免费工具","slug":"开源-免费工具","date":"2021-03-09T12:38:24.000Z","updated":"2021-03-09T12:39:22.923Z","comments":true,"path":"2021/03/09/开源-免费工具/","link":"","permalink":"https://born2do.github.io/2021/03/09/%E5%BC%80%E6%BA%90-%E5%85%8D%E8%B4%B9%E5%B7%A5%E5%85%B7/","excerpt":"","text":"远程登录 PuTTY官网： https://www.putty.org/ MTPUTTY （未找到相关licence，但官网表示一切免费）官网： https://ttyplus.com/ FinalShell（并非开源，仅通用版免费使用）官网： http://www.hostbuf.com/ 文件传输 WinSCP官网： https://winscp.net/ 文本编辑器 Notepad++官网： https://notepad-plus-plus.org/ Typora （并非开源，但免费）官网： https://www.typora.io/ 集成开发环境IDE Eclipse官网： https://www.eclipse.org/ 数据库连接工具 DBeaver（社区版免费）官网： https://dbeaver.io/ 数据库模型建模工具 PDMan官网： http://www.pdman.cn/ 浏览器 火狐官网： http://www.firefox.com.cn/ 数据库 MySQL官网： https://www.mysql.com/ 中间件 Apache Tomcat官网： https://tomcat.apache.org/ 图床工具 PicGo官网： https://picgo.github.io/PicGo-Doc/ 版本控制系统 Git官网： https://git-scm.com/ TortoiseSVN官网： https://tortoisesvn.net/","categories":[{"name":"工具","slug":"工具","permalink":"https://born2do.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"开源","slug":"开源","permalink":"https://born2do.github.io/tags/%E5%BC%80%E6%BA%90/"}],"author":"chenhy"},{"title":"Markdown","slug":"Markdown","date":"2021-03-08T13:28:06.000Z","updated":"2021-03-08T13:28:39.744Z","comments":true,"path":"2021/03/08/Markdown/","link":"","permalink":"https://born2do.github.io/2021/03/08/Markdown/","excerpt":"","text":"MarkdownMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 Markdown 编写的文档后缀为 .md, .markdown。 编辑器目前，主流的markdown编辑器有Typora、MarkdownPad（需要安装插件）、Atom等，但我比较中意Typora，无需安装任何插件，即装即用，轻量级软件，用起来得心应手。 Typora官网：https://www.typora.io/ 百度网盘： 链接：https://pan.baidu.com/s/1KrC2BoSP2_MBseaQ4Q0BZA提取码：3vyw 以下介绍，请复制内容到typora或其他编辑器查看效果。 对于部分样式，存在多种书写形式，建议只记一种，保持行文规范。 标题使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。注意：#号与标题内容之间要保留一个空格。 12345678910111213# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题####### 别想了，没有七级标题 段落格式段落Typora中直接回车即可换行。其他编译器，两个或两个以上空格加回车，即可换行。 字体123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 分隔线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 123***---___ 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可。 1~www.aliyun.com~ 下划线通过HTML的&lt;u&gt;标签来实现。 1&lt;u&gt;下划线&lt;&#x2F;u&gt; 注脚1[^要注明的文本] 列表无序列表使用星号(***)、加号(+)或是减号(-**)作为列表标记。注意，符号与文字间要空格。 123456789101112* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项 有序列表使用数字并加上.号来表示。注意，符号与文字间要空格。 1231. 第一项2. 第二项3. 第三项 列表嵌套只需在子列表中的选项添加四个空格即可。（使用tab键也可，会有不同效果） 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 区块区块区块引用在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号。 1&gt; 这是区块，不信你试试 区块嵌套区块可以嵌套，增加&gt;即可。 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 区块中使用列表123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项 列表中使用区块123* 第一项 &gt; 区块一* 第二项 代码代码片段少量片段，使用一对反单引号（``）即可。 1&#96;System.out.println();&#96; 代码块用一对 （```） 包裹一段代码，并指定一种语言（也可以不指定） 1 这就是代码块 1 链接链接使用方法如下： 12345[链接名称](链接地址)或者&lt;链接地址&gt; 图片Markdown 图片语法格式如下： 123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) Typora中，快捷键ctrl+shift+i，即可快速插入图片。 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 语法格式如下： 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 举例如下： 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 表格是markdown的一大痛点，简单的合并单元格都不行（实际上借助其他插件是可以的，就是太麻烦）。个人建议，需要用到表格的时候，直接右键-&gt;插入-&gt;表格，设置下行数和列数即可，省时又省力。 总结基本的markdown语法就是这些了，也够用了。想要学习其他高级操作，可以再去网上搜索。实际上，更重要的是动手实践，用的多了自然也就会了。 参考文档：Markdown 教程 博客最早记载时间为2020年04月23日。","categories":[{"name":"Markdown","slug":"Markdown","permalink":"https://born2do.github.io/categories/Markdown/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://born2do.github.io/tags/Markdown/"}],"author":"chenhy"},{"title":"Windows端口被占用","slug":"Windows端口被占用","date":"2021-03-08T13:26:20.000Z","updated":"2021-03-08T13:27:42.763Z","comments":true,"path":"2021/03/08/Windows端口被占用/","link":"","permalink":"https://born2do.github.io/2021/03/08/Windows%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/","excerpt":"","text":"背景启动JavaWeb项目，eclipse提示8080端口已被占用。 解决1.查看端口占用情况进入Windows命令行，输入“netstat -ano | findstr 8080”，查看8080端口是被哪个服务占用了。显示如下： 12TCP 0.0.0.0:8080 0.0.0.0:0 LISTENING 19288TCP [::]:8080 [::]:0 LISTENING 19288 2.终止服务进程输入命令“taskkill -pid 19288 -f”，19288服务终止，8080端口被释放。博客最早记载时间为2020年04月20日。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/tags/Windows/"}],"author":"chenhy"},{"title":"MYSQL解压版安装","slug":"MYSQL解压版安装","date":"2021-03-07T01:50:34.000Z","updated":"2021-03-07T01:57:00.587Z","comments":true,"path":"2021/03/07/MYSQL解压版安装/","link":"","permalink":"https://born2do.github.io/2021/03/07/MYSQL%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85/","excerpt":"","text":"根据自己的系统，从官网下载Mysql压缩包。将下载到的文件解压缩到自己喜欢的位置，例如我自己的位置是D:\\mysql-8.0.11-winx64。 配置环境变量。将Mysql的bin目录配置到path下面。 配置my.ini文件。在D:\\mysql-8.0.11-winx64（注意这个目录要是你自己的mysql目录）目录下新建一个配置文件，文件名叫my.ini，然后把下面的配置代码复制到在my.ini（代码中的路径要改成自己的文件存放路径）。 12345678910111213141516[mysql]# 设置mysql客户端默认字符集default-character-set&#x3D;utf8 [mysqld]#设置3306端口port &#x3D; 3306 # 设置mysql的安装目录basedir&#x3D;D:\\mysql-8.0.11-winx64# 设置mysql数据库的数据的存放目录datadir&#x3D;D:\\mysql-8.0.11-winx64\\data# 允许最大连接数max_connections&#x3D;200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server&#x3D;utf8# 创建新表时将使用的默认存储引擎default-storage-engine&#x3D;INNODB 安装mysql服务。将目录切换到你解压文件的D:\\mysql\\mysql-5.6.33-winx64\\bin目录，初始化和启动Mysql服务： 以管理员权限运行cmd 进入mysql的bin下 初始化，生成data文件夹12mysqld --initialize-insecure （建议使用，不设置root密码）mysqld --initialize （不建议使用，生成一个随机的root密码） 安装MySql服务1mysqld -install 开始mysql服务。启动mysql 1net start mysql 更改密码安装成功并开始mysql服务后，重新进入DOS命令行，输入mysql -u root -p之后回车。登录mysql之后，设置root密码 1set password for root@localhost &#x3D; password(&#39;YourPassword&#39;); 或者使用mysqlamdin修改root密码 1mysqladmin -u root -p password NewPassword； 博客最早记载时间为2019年08月30日。","categories":[{"name":"软件安装","slug":"软件安装","permalink":"https://born2do.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://born2do.github.io/tags/MYSQL/"}],"author":"chenhy"},{"title":"VC++6.0出现Error spawning cl.exe","slug":"VC-6-0出现Error-spawning-cl-exe","date":"2021-03-07T01:49:11.000Z","updated":"2021-03-07T01:50:13.891Z","comments":true,"path":"2021/03/07/VC-6-0出现Error-spawning-cl-exe/","link":"","permalink":"https://born2do.github.io/2021/03/07/VC-6-0%E5%87%BA%E7%8E%B0Error-spawning-cl-exe/","excerpt":"","text":"当我们在VC++6.0中编写好一个C语言程序后，点击“Compile（编译）”或者“Build（构建）”出现的“Compiling… ,Error spawning cl.exe”错误提示，一般都是因为路径设置的问题引起的。 首先查看VC++6.0的安装路径，一般默认安装都是安装在C:\\Program Files\\Microsoft Visual Studio目录下，但是你安装时有可能安装在其他目录中，一定要知道安装目录的路径。 打开VC++6.0程序，点击菜单栏上的“工具（T）”，在出现的下拉列表中选择“选项（O）…”，如下图所示。 弹出一个“选项”窗口，点击窗口菜单栏上的“目录”选项，点击目录（S）对应的下拉框会看到有可执行文件（executatble files）、include files、library files、source files四个选项。在“目录（S）”对应的下拉框中选择“include files”，在”路径(D)”中可以看到一共有三行路径，红线框中代表VC++6.0的安装路径，如果不是请改为安装路径。之后，对“可执行文件（executatble files）、library files、source files”做同样的修改。 改完之后，点击“确定”按钮，重新编译程序，可以发现没有出现“Compiling…,Error spawning cl.exe”这个问题了，程序可以正常编译了。 博客最早记载时间为2019年08月30日。","categories":[{"name":"error","slug":"error","permalink":"https://born2do.github.io/categories/error/"}],"tags":[{"name":"VC++6.0","slug":"VC-6-0","permalink":"https://born2do.github.io/tags/VC-6-0/"}],"author":"chenhy"},{"title":"PowerPoint 2013打不开PPT文件","slug":"PowerPoint-2013打不开PPT文件","date":"2021-03-06T13:23:55.000Z","updated":"2021-03-06T13:24:28.920Z","comments":true,"path":"2021/03/06/PowerPoint-2013打不开PPT文件/","link":"","permalink":"https://born2do.github.io/2021/03/06/PowerPoint-2013%E6%89%93%E4%B8%8D%E5%BC%80PPT%E6%96%87%E4%BB%B6/","excerpt":"","text":"从网上下载的PPT文件，其本身没有问题，但就是打不开。尝试过office程序的修复，但没用。文件打开的时候会问你 是否信任其来源，点击修复。但是总是修复失败，无法读取。网上的解决办法挺多，最简单的是：右键文件属性，点击解除锁定即可。但是这种方法，治标不治本。以下是彻底解决这个问题的方法：1、使用 PowerPoint 2013 打开PPT文件时会出现如图报错：2、点击“取消”3、点击左上角的“文件”按钮，进入OFFICE 设置4、在打开的界面，点击“选项”按钮5、进入弹出的“选项”窗口，依次选择“信任中心”-&gt;“信任中心设置”进入下一个界面6、选择“受保护视图”，将右边窗口三个选项全部取消 “√”选，点击“确定”7、这时，再打开PPT， 就不会报该错误提示了。 博客最早记载时间为2019年08月30日。","categories":[{"name":"error","slug":"error","permalink":"https://born2do.github.io/categories/error/"}],"tags":[{"name":"PowerPoint 2013","slug":"PowerPoint-2013","permalink":"https://born2do.github.io/tags/PowerPoint-2013/"}],"author":"chenhy"},{"title":"navicat连接MySQL出现2059错误","slug":"navicat连接MySQL出现2059错误","date":"2021-03-06T13:21:44.000Z","updated":"2021-03-06T13:23:36.523Z","comments":true,"path":"2021/03/06/navicat连接MySQL出现2059错误/","link":"","permalink":"https://born2do.github.io/2021/03/06/navicat%E8%BF%9E%E6%8E%A5MySQL%E5%87%BA%E7%8E%B02059%E9%94%99%E8%AF%AF/","excerpt":"","text":"使用navicat连接MySQL时出现2059错误。原因为高版本的MySQL更改了密码验证机制，再次更改回去即可。 进入CMD命令符窗口（win+R） 登录MySQL进入mysql安装目录的bin路径下运行mysql -u root -p命令进行登录（密码是安装mysql时设置的密码） 更改密码验证机制输入以下命令进行更改： 1ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;; root是用户名，localhost是ip地址127.0.0.1都是特指本机，mysql_native_password是旧的密码验证机制，root是密码，最后别忘了分号。 进入Navicat测试连接 博客最早记载时间为2019年08月30日。","categories":[{"name":"error","slug":"error","permalink":"https://born2do.github.io/categories/error/"}],"tags":[{"name":"Navicat","slug":"Navicat","permalink":"https://born2do.github.io/tags/Navicat/"},{"name":"MySQL","slug":"MySQL","permalink":"https://born2do.github.io/tags/MySQL/"}],"author":"chenhy"},{"title":"Windows使用小tips","slug":"Windows使用小tips","date":"2021-03-05T07:10:00.000Z","updated":"2021-03-06T10:21:41.710Z","comments":true,"path":"2021/03/05/Windows使用小tips/","link":"","permalink":"https://born2do.github.io/2021/03/05/Windows%E4%BD%BF%E7%94%A8%E5%B0%8Ftips/","excerpt":"","text":"widows输入法，输入后字体变为繁体解决： 打开记事本，光标停在文档内，使用ctrl+shift+f，即可在简体与繁体之间切换。 word2013无法打开pdf文件，提示无法启动转换器pdf文件解决： 方法一：(最实用) 右键单击word2013，选择属性。在兼容性里勾选以管理员身份运行此程序。再次打开pdf格式文件，出现提示，点击确定即可。 方法二： 打开系统盘C盘，依次找到路径\\Program Files\\Common Files\\Microsoft Shared\\TextConv，找到“TextConv”这个文件夹，然后将其删除。 方法三： 在桌面左下方的“开始”“运行”中输入“regedit”，进入注册表编辑器，然后依次找到 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Shared Tools\\Text Converters\\Import\\MSWord6.wpc，这个路径，将“MSWord6.wpc”删除即可。","categories":[{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/tags/Windows/"}],"author":"chenhy"},{"title":"pure开启文章目录","slug":"pure开启文章目录","date":"2021-03-04T08:15:00.000Z","updated":"2021-03-04T16:15:17.111Z","comments":true,"path":"2021/03/04/pure开启文章目录/","link":"","permalink":"https://born2do.github.io/2021/03/04/pure%E5%BC%80%E5%90%AF%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95/","excerpt":"","text":"我的Hexo博客使用的主题名为“pure”，在最开始搭建时，就将主题配置文件的关于文章目录的toc开启了，但是发现并没有效果。后搜索发现需要这样做： 主题配置文件blog/themes/pure/_config.yml里面config → toc: true开启目录 每一篇文章blog/source/_posts/xxx.md的头部都加上toc: true 文章模板blog/scaffolds/post.md的头部也加上toc: true 这样子，新老文章的目录都已经开启了。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"}],"author":"chenhy"},{"title":"Hexo博客网站安装gitalk插件","slug":"Hexo博客网站安装gitalk插件","date":"2021-03-04T07:30:00.000Z","updated":"2021-03-04T16:03:09.451Z","comments":true,"path":"2021/03/04/Hexo博客网站安装gitalk插件/","link":"","permalink":"https://born2do.github.io/2021/03/04/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%AE%89%E8%A3%85gitalk%E6%8F%92%E4%BB%B6/","excerpt":"","text":"博客的评论系统，一开始选择了“来必力”（韩国的），但是发现注册个账号要人命，果断放弃。后在Gitalk和Gitment之间选择了Gitalk。开源免费无广告，不要因为是个白嫖党而不好意思，毕竟正是开源促进了IT业的发展。在此记录下，博客网站安装评论系统的全过程。 注册 GitHub OAuth AppsGitHub头像-&gt;Settings-&gt;Developer settings-&gt;OAuth Apps，点击“new OAuth apps”进行OAuth application的创建。注册成功后，复制ClientID以及生成的ClientSecret，待用。 新建仓库新建仓库，用于存储评论。 Hexo引入Gitalk打开主题配置文件，修改评论系统相关配置。我使用的Hexo的主题名为pure，主题配置文件中，注释相当详细，在此不做过多赘述。 上传GitHub并初始化评论系统本地的评论系统完成后，将本地博客系统上传至GitHub仓库。访问下在GitHub上的博客，会发现评论模块会提示初始化提示，使用自己的GitHub账号登陆下就好了。 Gitalk 403报错我的Gitalk一开始就显示403报错，查阅相关资料，是因为“Public demo server (cors-anywhere.herokuapp.com) will be very limited by January 2021, 31st”，网站受限了。解决方式就是点击下方的链接进行暂时权限的获取（初始化后就不用管他了）。解锁链接： http://cors-anywhere.herokuapp.com/corsdemo 。 参考链接https://www.cnblogs.com/qisi007/p/13731562.html","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"},{"name":"Gitalk","slug":"Gitalk","permalink":"https://born2do.github.io/tags/Gitalk/"}],"author":"chenhy"},{"title":"博客图床设置","slug":"博客图床设置","date":"2021-03-03T07:30:00.000Z","updated":"2021-03-03T15:46:55.254Z","comments":true,"path":"2021/03/03/博客图床设置/","link":"","permalink":"https://born2do.github.io/2021/03/03/%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"以前写博客，基本上都是在本地，博客中的图片也都是使用相对路径。在博客园也写过博客，那时图片是上传到博客园的自定义文件夹中，再去复制图片链接使用。但是，这些使用图片的方式都不太友善，不好管理。这次重新搭建整理博客，我开始使用图床了。 下载图片管理工具PicGo （不喜欢也可略过）我使用的图片管理工具为PicGo（ https://picgo.github.io/PicGo-Doc/ ）。官方文档（ https://picgo.github.io/PicGo-Doc/zh/guide/config.html ）极为详细，先无脑安装一波，然后按照官方文档进行配置就好了。 图床图床网站还是比较多的，当然，也可以在GitHub上自行搭建仓库用于存储图片。一开始，我是想用GitHub自行搭建的，但是搭建完成后发现，网络太慢了，基本上加载不出来。然后对比了多家图床网站后，选择了SMMS。速度快，无广告，存储空间还挺大，与PicGo搭配使用配置起来也比较简单。自行注册，生成token，然后配置到PicGo中，配置完成。极力推荐SMMS！！！","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"图床","slug":"博客搭建/图床","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E5%BA%8A/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://born2do.github.io/tags/PicGo/"},{"name":"SMMS","slug":"SMMS","permalink":"https://born2do.github.io/tags/SMMS/"}],"author":"chenhy"},{"title":"GitHub新建仓库，默认分支由master改为main","slug":"GitHub新建仓库，默认分支由master改为main","date":"2021-03-03T05:30:00.000Z","updated":"2021-03-03T15:44:18.753Z","comments":true,"path":"2021/03/03/GitHub新建仓库，默认分支由master改为main/","link":"","permalink":"https://born2do.github.io/2021/03/03/GitHub%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E7%94%B1master%E6%94%B9%E4%B8%BAmain/","excerpt":"","text":"在使用Hexo搭建好本地博客后，推送至GitHub仓库。由于长时间未使用GitHub了，并不知晓新建仓库的默认分支由master改为main了，在站点配置文件中branch的值写成了master。使用git上传后，在原有仓库新增了一个master分支。发现这个问题后，我直接将GitHub仓库中的master分支删除掉了，并修改本地站点配置文件中的master为main，重新进行了推送。幸好及时发现，做了更正，可谓是及时止损呐。 默认分支更名，可以去GitHub上看看 https://github.com/github/renaming.git 。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://born2do.github.io/tags/GitHub/"}],"author":"chenhy"},{"title":"hexo报错TypeError: Cannot read property 'count' of undefined","slug":"hexo报错TypeError-Cannot-read-property-'count'-of-undefined","date":"2021-03-03T04:30:00.000Z","updated":"2021-03-03T15:44:42.224Z","comments":true,"path":"2021/03/03/hexo报错TypeError-Cannot-read-property-'count'-of-undefined/","link":"","permalink":"https://born2do.github.io/2021/03/03/hexo%E6%8A%A5%E9%94%99TypeError-Cannot-read-property-'count'-of-undefined/","excerpt":"","text":"情景再现使用“hexo s”启动本地服务器时，项目报错，具体如下： 1234567891011121314151617181920D:\\blog&gt;hexo sINFO Validating configINFO Start processingFATAL &#123; err: TypeError: Cannot read property &#x27;count&#x27; of undefined at Hexo.module.exports (D:\\blog\\node_modules\\_hexo-baidu-url-submit@0.0.6@hexo-baidu-url-submit\\lib\\generator.js:4:41) at Hexo.tryCatcher (D:\\blog\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Hexo.&lt;anonymous&gt; (D:\\blog\\node_modules\\bluebird\\js\\release\\method.js:15:34) at D:\\blog\\node_modules\\hexo\\lib\\hexo\\index.js:405:22 at tryCatcher (D:\\blog\\node_modules\\bluebird\\js\\release\\util.js:16:23) at MappingPromiseArray._promiseFulfilled (D:\\blog\\node_modules\\bluebird\\js\\release\\map.js:68:38) at MappingPromiseArray.PromiseArray._iterate (D:\\blog\\node_modules\\bluebird\\js\\release\\promise_array.js:115:31) at MappingPromiseArray.init (D:\\blog\\node_modules\\bluebird\\js\\release\\promise_array.js:79:10) at MappingPromiseArray._asyncInit (D:\\blog\\node_modules\\bluebird\\js\\release\\map.js:37:10) at _drainQueueStep (D:\\blog\\node_modules\\bluebird\\js\\release\\async.js:97:12) at _drainQueue (D:\\blog\\node_modules\\bluebird\\js\\release\\async.js:86:9) at Async._drainQueues (D:\\blog\\node_modules\\bluebird\\js\\release\\async.js:102:5) at Immediate.Async.drainQueues [as _onImmediate] (D:\\blog\\node_modules\\bluebird\\js\\release\\async.js:15:14) at processImmediate (internal/timers.js:461:21)&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html 而在这之前，我安装了hexo-baidu-url-submit插件。 处理从报错日志中我们可以看到是由于hexo-baidu-url-submit插件导致的，查看官方文档（ https://github.com/huiwang/hexo-baidu-url-submit ）发现是由于没有在站点配置文件配置baidu-url-submit配置项导致。这里介绍两种处理方式： 1.补全相关配置信息 注册百度站长（ https://ziyuan.baidu.com/ ）（需要有自己的域名），获取相关token等必要信息。 将baidu-url-submit配置项添加至站点配置文件中。123456#设置百度主动推送baidu_url_submit: count: 200 #比如200，代表提交最新的200个链接 host: www.baidu.com # 在百度站长平台中注册的域名，这个改为你自己的域名 token: your_token # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里，这个默认 此外，还需要在站点配置文件中加入新的 deploy 配置项：123456deploy:- type: git repo: 【GitHub项目地址】 branch: main- type: baidu_url_submitter 2.放弃百度主动推送功能，卸载该插件即可。123npm remove hexo-baidu-url-submithexo cleanhexo g 由于没有域名，我选择了后者，放弃了百度主动推送功能。第一种处理方式是从他人博客参考获取，可行性仍有待进一步验证。 参考链接 https://blog.csdn.net/nineya_com/article/details/103445898 https://blog.yirenliu.cn/posts/42821/#%E7%99%BE%E5%BA%A6%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81%E7%9A%84%E4%BD%9C%E7%94%A8","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"}],"author":"chenhy"},{"title":"hexo s 报错","slug":"hexo-s-报错","date":"2021-03-02T06:30:00.000Z","updated":"2021-03-02T15:35:39.108Z","comments":true,"path":"2021/03/02/hexo-s-报错/","link":"","permalink":"https://born2do.github.io/2021/03/02/hexo-s-%E6%8A%A5%E9%94%99/","excerpt":"","text":"情景再现在执行“hexo s”，启动本地服务器时，控制台报错如下： 123456$ hexo sINFO Validating configFATAL Permission denied. You can&#39;t use port 4000.FATAL &#123; err: Error: listen EACCES: permission denied 0.0.0.0:4000…… 处理查看报错日志，很明显是默认启动端口4000已经被占用。为了不影响现有已运行程序，我们暂时修改启动端口，命令如下： 1hexo s -p 5555 服务器成功启动。 此时，需通过 http://localhost:5555/ 来访问本地博客。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"}],"author":"chenhy"},{"title":"hexo init 403超时报错","slug":"hexo-init-403超时报错","date":"2021-03-02T06:00:00.000Z","updated":"2021-03-02T15:32:20.353Z","comments":true,"path":"2021/03/02/hexo-init-403超时报错/","link":"","permalink":"https://born2do.github.io/2021/03/02/hexo-init-403%E8%B6%85%E6%97%B6%E6%8A%A5%E9%94%99/","excerpt":"","text":"情景再现在执行“hexo init blog”，对blog文件夹初始化时，控制台报错如下： 1234$ hexo init blogINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitfatal: unable to access &#x27;https://github.com/hexojs/hexo-starter.git/&#x27;: Failed to connect to github.com port 443: Timed out…… 处理403网络超时报错，那么恭喜你，被墙了。解决方式如下： 1.检查是否真正由于无法连接GitHub导致。在Windows命令行下，执行如下命令： 1ping github.com 如果结果显示100%丢失，那么就是因为无法连接到GitHub导致。 12345678正在 Ping github.com [13.229.188.59] 具有 32 字节的数据:请求超时。请求超时。请求超时。请求超时。13.229.188.59 的 Ping 统计信息: 数据包: 已发送 &#x3D; 4，已接收 &#x3D; 0，丢失 &#x3D; 4 (100% 丢失)， 如果不是，请不要继续往下看了，浪费时间。请另寻他法。 2.配置本地hosts访问站长工具网站（ http://tool.chinaz.com/dns?type=1&amp;host=github.com&amp;ip= ），获取GitHub的相关DNS。先在本地ping相应的IP，如果可以连接上并且速度还行，那么可以将相关信息配置到本地hosts文件中。 113.114.40.48 github.com hosts文件配置完成后，在命令行执行如下命令： 12345$ ipconfig &#x2F;flushdnsWindows IP 配置已成功刷新 DNS 解析缓存。 3.完美解决重新打开命令行窗口，执行“hexo init blog”，你会发现片刻后Hexo初始化便完成了。 获取GitHub的DNS方式不止这一种方式，你也可以访问ipaddress网站（ https://github.com.ipaddress.com/www.github.com ）获取相关IP，更多方式请自行百度。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"}],"author":"chenhy"},{"title":"博客搭建","slug":"博客搭建","date":"2021-03-02T03:00:00.000Z","updated":"2021-03-02T15:30:13.664Z","comments":true,"path":"2021/03/02/博客搭建/","link":"","permalink":"https://born2do.github.io/2021/03/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","excerpt":"","text":"采用GitHub+Hexo搭建博客。优点：干净好看，自主性强，没广告。缺点：在建设过程中，很容易遇到墙，随之而来的便是失败了。在此，记录下博客搭建过程。 Node.js官网（ https://nodejs.org/zh-cn/download/ ）下载node.js安装包，无脑安装即可。Windows命令行下，检查是否成功安装： 12345D:\\&gt;node -vv12.19.0D:\\&gt;npm -v6.14.8 使用npm下载依赖时，由于是从国外的网站上下载内容，所以可能经常会出现不稳定的情况，所以需要下载cnpm代替npm，cnpm是国内淘宝的做的，在国内使用较为稳定。 12341.下载cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org2.下载依赖cnpm i 或者 cnpm install 在后续的npm操作中，如卡顿或是直接超时报错，建议使用cnpm代替npm。 Git官网（ https://git-scm.com/downloads ）下载Git安装包，在安装过程中如遇到“Use Windows’ default console window”，选择该项即可。剩余步骤无脑安装即可。Windows命令行下，检查是否成功安装： 12D:\\&gt;git --versiongit version 2.22.0.windows.1 配置GitHubSSH1.在本地生成SSH key1$ ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot; 一般默认在 C:\\Users\\【你的用户名】\\.ssh\\ 目录下生成相应的id_rsa.pub文件。 2.GitHub添加SSH Keysettings-&gt;SSH and GPG keys-&gt;New SSH key,title随意，key则填写id_rsa.pub中的内容。 Hexo本地博客搭建官网（ https://hexo.io/zh-cn/ ），官方文档较为详细，可先自行阅读后再进行搭建工作。 1.框架搭建123456$ D:$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo server 以上命令是在D盘初始化了一个blog文件夹，该文件夹存放的是Hexo静态资源。使用命令行界面进入D:\\blog，执行“hexo server”，使用浏览器访问 http://localhost:4000 即可看到我们搭建的博客网站。 2.主题替换以及相关配置文件修改从官网下载自己心仪的主题，解压缩放置到D:\\blog\\themes\\目录下。更改根目录下的_config.yml文件，修改theme后面的值为刚才解压缩的文件夹名。重新执行“hexo server”，刷新浏览器会发现博客网站主题已经改变。配置文件已经插件的下载安装，请自行查阅官网文档以及主题的帮助文档。不在此做过多介绍。 本地博客发布至GitHub在GitHub上新建仓库，名称格式为“【你的GitHub昵称】.github.io”。更改根目录下的_config.yml文件，修改deploy后面的内容。 1234deploy: type: git repo: [你的仓库地址] branch: main 使用命令行界面进入D:\\blog，执行如下命令： 123hexo cleanhexo ghexo d 至此，静态博客网站搭建完成。 实际上在搭建过程中，遇到了不少问题，并没有上述那么顺利。本文仅作流程参考，如果在搭建过程中遇到了其他问题，还请自行百度解决。后续几篇文章我将分享下我在搭建过程中遇到的一些问题以及相应的解决办法，供大家参考。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"https://born2do.github.io/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"}],"author":"chenhy"},{"title":"Welcome to my blog","slug":"Welcome-to-my-blog","date":"2021-03-02T02:00:00.000Z","updated":"2021-03-02T14:30:28.350Z","comments":true,"path":"2021/03/02/Welcome-to-my-blog/","link":"","permalink":"https://born2do.github.io/2021/03/02/Welcome-to-my-blog/","excerpt":"","text":"博客建设，从CSDN到GitHub到博客园再到GitHub，从hexo到hugo再到hexo，最终还是选择了 Github+Hexo的方式来搭建自己的博客。兜兜转转，还是她。原因如下： 使用gitpage搭建静态网站的成本为0 。 使用Hexo生成静态网站，简单、方便、美观。 Github+Hexo的搭建模式较为常见、流行，遇到问题了，网络上的解决办法比较多。 后续我会将其他网站上的博客逐步迁移至GitHub上，只在该网站上进行博客的发布。网址：https://born2do.github.io并非大神，不喜勿喷。若博客有不到位之处，还烦请指正，感谢！！！","categories":[],"tags":[],"author":"chenhy"},{"title":"Hello World","slug":"hello-world","date":"2021-02-28T15:59:12.950Z","updated":"2021-02-28T15:59:12.950Z","comments":true,"path":"2021/02/28/hello-world/","link":"","permalink":"https://born2do.github.io/2021/02/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"规约","slug":"规约","permalink":"https://born2do.github.io/categories/%E8%A7%84%E7%BA%A6/"},{"name":"Linux","slug":"Linux","permalink":"https://born2do.github.io/categories/Linux/"},{"name":"Excel","slug":"Excel","permalink":"https://born2do.github.io/categories/Excel/"},{"name":"shell","slug":"shell","permalink":"https://born2do.github.io/categories/shell/"},{"name":"工具","slug":"工具","permalink":"https://born2do.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Markdown","slug":"Markdown","permalink":"https://born2do.github.io/categories/Markdown/"},{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/categories/Windows/"},{"name":"软件安装","slug":"软件安装","permalink":"https://born2do.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"name":"error","slug":"error","permalink":"https://born2do.github.io/categories/error/"},{"name":"博客搭建","slug":"博客搭建","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"图床","slug":"博客搭建/图床","permalink":"https://born2do.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%9B%BE%E5%BA%8A/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://born2do.github.io/tags/Java/"},{"name":"crontab","slug":"crontab","permalink":"https://born2do.github.io/tags/crontab/"},{"name":"Excel","slug":"Excel","permalink":"https://born2do.github.io/tags/Excel/"},{"name":"find","slug":"find","permalink":"https://born2do.github.io/tags/find/"},{"name":"开源","slug":"开源","permalink":"https://born2do.github.io/tags/%E5%BC%80%E6%BA%90/"},{"name":"Markdown","slug":"Markdown","permalink":"https://born2do.github.io/tags/Markdown/"},{"name":"Windows","slug":"Windows","permalink":"https://born2do.github.io/tags/Windows/"},{"name":"MYSQL","slug":"MYSQL","permalink":"https://born2do.github.io/tags/MYSQL/"},{"name":"VC++6.0","slug":"VC-6-0","permalink":"https://born2do.github.io/tags/VC-6-0/"},{"name":"PowerPoint 2013","slug":"PowerPoint-2013","permalink":"https://born2do.github.io/tags/PowerPoint-2013/"},{"name":"Navicat","slug":"Navicat","permalink":"https://born2do.github.io/tags/Navicat/"},{"name":"MySQL","slug":"MySQL","permalink":"https://born2do.github.io/tags/MySQL/"},{"name":"Hexo","slug":"Hexo","permalink":"https://born2do.github.io/tags/Hexo/"},{"name":"Gitalk","slug":"Gitalk","permalink":"https://born2do.github.io/tags/Gitalk/"},{"name":"PicGo","slug":"PicGo","permalink":"https://born2do.github.io/tags/PicGo/"},{"name":"SMMS","slug":"SMMS","permalink":"https://born2do.github.io/tags/SMMS/"},{"name":"GitHub","slug":"GitHub","permalink":"https://born2do.github.io/tags/GitHub/"}]}